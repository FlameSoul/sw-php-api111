<?php
/**
 * ReferencesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ReferencesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReferencesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation referencesAirlinesGet
     *
     * Справочник авиакомпаний
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2006
     */
    public function referencesAirlinesGet($content_type, $authorization, $accept)
    {
        list($response) = $this->referencesAirlinesGetWithHttpInfo($content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesAirlinesGetWithHttpInfo
     *
     * Справочник авиакомпаний
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesAirlinesGetWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2006';
        $request = $this->referencesAirlinesGetRequest($content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesAirlinesGetAsync
     *
     * Справочник авиакомпаний
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesAirlinesGetAsync($content_type, $authorization, $accept)
    {
        return $this->referencesAirlinesGetAsyncWithHttpInfo($content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesAirlinesGetAsyncWithHttpInfo
     *
     * Справочник авиакомпаний
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesAirlinesGetAsyncWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2006';
        $request = $this->referencesAirlinesGetRequest($content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesAirlinesGet'
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesAirlinesGetRequest($content_type, $authorization, $accept)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesAirlinesGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesAirlinesGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesAirlinesGet'
            );
        }

        $resourcePath = '/references/airlines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesAirportsGet
     *
     * Справочник аэропортов
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function referencesAirportsGet($content_type, $authorization, $accept)
    {
        list($response) = $this->referencesAirportsGetWithHttpInfo($content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesAirportsGetWithHttpInfo
     *
     * Справочник аэропортов
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesAirportsGetWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->referencesAirportsGetRequest($content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesAirportsGetAsync
     *
     * Справочник аэропортов
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesAirportsGetAsync($content_type, $authorization, $accept)
    {
        return $this->referencesAirportsGetAsyncWithHttpInfo($content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesAirportsGetAsyncWithHttpInfo
     *
     * Справочник аэропортов
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesAirportsGetAsyncWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->referencesAirportsGetRequest($content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesAirportsGet'
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesAirportsGetRequest($content_type, $authorization, $accept)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesAirportsGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesAirportsGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesAirportsGet'
            );
        }

        $resourcePath = '/references/airports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesAutocompleteDeparturesGet
     *
     * Автокомплит городов вылета
     *
     * @param  string $query Поисковая строка (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20016
     */
    public function referencesAutocompleteDeparturesGet($query, $content_type, $authorization, $accept)
    {
        list($response) = $this->referencesAutocompleteDeparturesGetWithHttpInfo($query, $content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesAutocompleteDeparturesGetWithHttpInfo
     *
     * Автокомплит городов вылета
     *
     * @param  string $query Поисковая строка (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20016, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesAutocompleteDeparturesGetWithHttpInfo($query, $content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20016';
        $request = $this->referencesAutocompleteDeparturesGetRequest($query, $content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20016',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesAutocompleteDeparturesGetAsync
     *
     * Автокомплит городов вылета
     *
     * @param  string $query Поисковая строка (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesAutocompleteDeparturesGetAsync($query, $content_type, $authorization, $accept)
    {
        return $this->referencesAutocompleteDeparturesGetAsyncWithHttpInfo($query, $content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesAutocompleteDeparturesGetAsyncWithHttpInfo
     *
     * Автокомплит городов вылета
     *
     * @param  string $query Поисковая строка (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesAutocompleteDeparturesGetAsyncWithHttpInfo($query, $content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20016';
        $request = $this->referencesAutocompleteDeparturesGetRequest($query, $content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesAutocompleteDeparturesGet'
     *
     * @param  string $query Поисковая строка (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesAutocompleteDeparturesGetRequest($query, $content_type, $authorization, $accept)
    {
        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling referencesAutocompleteDeparturesGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesAutocompleteDeparturesGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesAutocompleteDeparturesGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesAutocompleteDeparturesGet'
            );
        }

        $resourcePath = '/references/autocomplete_departures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesAutocompleteV2Get
     *
     * Новый автокомплит для выбора направлений
     *
     * @param  string $query Текст для поиска (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $from_city Название города вылета на английском (optional)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20014[]
     */
    public function referencesAutocompleteV2Get($query, $content_type, $authorization, $accept, $from_city = null, $search_type = null)
    {
        list($response) = $this->referencesAutocompleteV2GetWithHttpInfo($query, $content_type, $authorization, $accept, $from_city, $search_type);
        return $response;
    }

    /**
     * Operation referencesAutocompleteV2GetWithHttpInfo
     *
     * Новый автокомплит для выбора направлений
     *
     * @param  string $query Текст для поиска (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $from_city Название города вылета на английском (optional)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20014[], HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesAutocompleteV2GetWithHttpInfo($query, $content_type, $authorization, $accept, $from_city = null, $search_type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20014[]';
        $request = $this->referencesAutocompleteV2GetRequest($query, $content_type, $authorization, $accept, $from_city, $search_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20014[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesAutocompleteV2GetAsync
     *
     * Новый автокомплит для выбора направлений
     *
     * @param  string $query Текст для поиска (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $from_city Название города вылета на английском (optional)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesAutocompleteV2GetAsync($query, $content_type, $authorization, $accept, $from_city = null, $search_type = null)
    {
        return $this->referencesAutocompleteV2GetAsyncWithHttpInfo($query, $content_type, $authorization, $accept, $from_city, $search_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesAutocompleteV2GetAsyncWithHttpInfo
     *
     * Новый автокомплит для выбора направлений
     *
     * @param  string $query Текст для поиска (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $from_city Название города вылета на английском (optional)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesAutocompleteV2GetAsyncWithHttpInfo($query, $content_type, $authorization, $accept, $from_city = null, $search_type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20014[]';
        $request = $this->referencesAutocompleteV2GetRequest($query, $content_type, $authorization, $accept, $from_city, $search_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesAutocompleteV2Get'
     *
     * @param  string $query Текст для поиска (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $from_city Название города вылета на английском (optional)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesAutocompleteV2GetRequest($query, $content_type, $authorization, $accept, $from_city = null, $search_type = null)
    {
        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling referencesAutocompleteV2Get'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesAutocompleteV2Get'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesAutocompleteV2Get'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesAutocompleteV2Get'
            );
        }

        $resourcePath = '/references/autocomplete_v2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query, null);
        }
        // query params
        if ($from_city !== null) {
            $queryParams['from_city'] = ObjectSerializer::toQueryValue($from_city, null);
        }
        // query params
        if ($search_type !== null) {
            $queryParams['search_type'] = ObjectSerializer::toQueryValue($search_type, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesCatalogsGet
     *
     * получение справочников в формате CSV
     *
     * @param  string $name Название каталога (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function referencesCatalogsGet($name, $content_type, $authorization, $accept)
    {
        list($response) = $this->referencesCatalogsGetWithHttpInfo($name, $content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesCatalogsGetWithHttpInfo
     *
     * получение справочников в формате CSV
     *
     * @param  string $name Название каталога (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesCatalogsGetWithHttpInfo($name, $content_type, $authorization, $accept)
    {
        $returnType = 'string';
        $request = $this->referencesCatalogsGetRequest($name, $content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesCatalogsGetAsync
     *
     * получение справочников в формате CSV
     *
     * @param  string $name Название каталога (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesCatalogsGetAsync($name, $content_type, $authorization, $accept)
    {
        return $this->referencesCatalogsGetAsyncWithHttpInfo($name, $content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesCatalogsGetAsyncWithHttpInfo
     *
     * получение справочников в формате CSV
     *
     * @param  string $name Название каталога (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesCatalogsGetAsyncWithHttpInfo($name, $content_type, $authorization, $accept)
    {
        $returnType = 'string';
        $request = $this->referencesCatalogsGetRequest($name, $content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesCatalogsGet'
     *
     * @param  string $name Название каталога (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesCatalogsGetRequest($name, $content_type, $authorization, $accept)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling referencesCatalogsGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesCatalogsGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesCatalogsGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesCatalogsGet'
            );
        }

        $resourcePath = '/references/catalogs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesCitizenshipsGet
     *
     * Метод получения списка всех возможных гражданств
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20010
     */
    public function referencesCitizenshipsGet($content_type, $authorization, $accept)
    {
        list($response) = $this->referencesCitizenshipsGetWithHttpInfo($content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesCitizenshipsGetWithHttpInfo
     *
     * Метод получения списка всех возможных гражданств
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesCitizenshipsGetWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20010';
        $request = $this->referencesCitizenshipsGetRequest($content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesCitizenshipsGetAsync
     *
     * Метод получения списка всех возможных гражданств
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesCitizenshipsGetAsync($content_type, $authorization, $accept)
    {
        return $this->referencesCitizenshipsGetAsyncWithHttpInfo($content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesCitizenshipsGetAsyncWithHttpInfo
     *
     * Метод получения списка всех возможных гражданств
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesCitizenshipsGetAsyncWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20010';
        $request = $this->referencesCitizenshipsGetRequest($content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesCitizenshipsGet'
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesCitizenshipsGetRequest($content_type, $authorization, $accept)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesCitizenshipsGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesCitizenshipsGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesCitizenshipsGet'
            );
        }

        $resourcePath = '/references/citizenships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesClientDeparturesGet
     *
     * Доступные города вылета
     *
     * @param  bool $automatically_detect_city Флаг автоматического определения города нахождения (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float $lat Координата широты (optional)
     * @param  float $long Координата долготы (optional)
     * @param  string $city Последний выбранный город (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20017
     */
    public function referencesClientDeparturesGet($automatically_detect_city, $content_type, $authorization, $accept, $lat = null, $long = null, $city = null)
    {
        list($response) = $this->referencesClientDeparturesGetWithHttpInfo($automatically_detect_city, $content_type, $authorization, $accept, $lat, $long, $city);
        return $response;
    }

    /**
     * Operation referencesClientDeparturesGetWithHttpInfo
     *
     * Доступные города вылета
     *
     * @param  bool $automatically_detect_city Флаг автоматического определения города нахождения (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float $lat Координата широты (optional)
     * @param  float $long Координата долготы (optional)
     * @param  string $city Последний выбранный город (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesClientDeparturesGetWithHttpInfo($automatically_detect_city, $content_type, $authorization, $accept, $lat = null, $long = null, $city = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->referencesClientDeparturesGetRequest($automatically_detect_city, $content_type, $authorization, $accept, $lat, $long, $city);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesClientDeparturesGetAsync
     *
     * Доступные города вылета
     *
     * @param  bool $automatically_detect_city Флаг автоматического определения города нахождения (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float $lat Координата широты (optional)
     * @param  float $long Координата долготы (optional)
     * @param  string $city Последний выбранный город (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesClientDeparturesGetAsync($automatically_detect_city, $content_type, $authorization, $accept, $lat = null, $long = null, $city = null)
    {
        return $this->referencesClientDeparturesGetAsyncWithHttpInfo($automatically_detect_city, $content_type, $authorization, $accept, $lat, $long, $city)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesClientDeparturesGetAsyncWithHttpInfo
     *
     * Доступные города вылета
     *
     * @param  bool $automatically_detect_city Флаг автоматического определения города нахождения (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float $lat Координата широты (optional)
     * @param  float $long Координата долготы (optional)
     * @param  string $city Последний выбранный город (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesClientDeparturesGetAsyncWithHttpInfo($automatically_detect_city, $content_type, $authorization, $accept, $lat = null, $long = null, $city = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->referencesClientDeparturesGetRequest($automatically_detect_city, $content_type, $authorization, $accept, $lat, $long, $city);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesClientDeparturesGet'
     *
     * @param  bool $automatically_detect_city Флаг автоматического определения города нахождения (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float $lat Координата широты (optional)
     * @param  float $long Координата долготы (optional)
     * @param  string $city Последний выбранный город (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesClientDeparturesGetRequest($automatically_detect_city, $content_type, $authorization, $accept, $lat = null, $long = null, $city = null)
    {
        // verify the required parameter 'automatically_detect_city' is set
        if ($automatically_detect_city === null || (is_array($automatically_detect_city) && count($automatically_detect_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $automatically_detect_city when calling referencesClientDeparturesGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesClientDeparturesGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesClientDeparturesGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesClientDeparturesGet'
            );
        }

        $resourcePath = '/references/client_departures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($automatically_detect_city !== null) {
            $queryParams['automatically_detect_city'] = ObjectSerializer::toQueryValue($automatically_detect_city, null);
        }
        // query params
        if ($lat !== null) {
            $queryParams['lat'] = ObjectSerializer::toQueryValue($lat, 'float');
        }
        // query params
        if ($long !== null) {
            $queryParams['long'] = ObjectSerializer::toQueryValue($long, 'float');
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesDepartureCitiesGet
     *
     * Доступные города вылета для страны
     *
     * @param  string $to_country Страна в которую планируется полететь (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20020
     */
    public function referencesDepartureCitiesGet($to_country, $content_type, $authorization, $accept)
    {
        list($response) = $this->referencesDepartureCitiesGetWithHttpInfo($to_country, $content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesDepartureCitiesGetWithHttpInfo
     *
     * Доступные города вылета для страны
     *
     * @param  string $to_country Страна в которую планируется полететь (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20020, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesDepartureCitiesGetWithHttpInfo($to_country, $content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20020';
        $request = $this->referencesDepartureCitiesGetRequest($to_country, $content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20020',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesDepartureCitiesGetAsync
     *
     * Доступные города вылета для страны
     *
     * @param  string $to_country Страна в которую планируется полететь (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesDepartureCitiesGetAsync($to_country, $content_type, $authorization, $accept)
    {
        return $this->referencesDepartureCitiesGetAsyncWithHttpInfo($to_country, $content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesDepartureCitiesGetAsyncWithHttpInfo
     *
     * Доступные города вылета для страны
     *
     * @param  string $to_country Страна в которую планируется полететь (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesDepartureCitiesGetAsyncWithHttpInfo($to_country, $content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20020';
        $request = $this->referencesDepartureCitiesGetRequest($to_country, $content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesDepartureCitiesGet'
     *
     * @param  string $to_country Страна в которую планируется полететь (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesDepartureCitiesGetRequest($to_country, $content_type, $authorization, $accept)
    {
        // verify the required parameter 'to_country' is set
        if ($to_country === null || (is_array($to_country) && count($to_country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_country when calling referencesDepartureCitiesGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesDepartureCitiesGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesDepartureCitiesGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesDepartureCitiesGet'
            );
        }

        $resourcePath = '/references/departure_cities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($to_country !== null) {
            $queryParams['to_country'] = ObjectSerializer::toQueryValue($to_country, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesDeparturesGet
     *
     * Справочник мест отправления
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2009
     */
    public function referencesDeparturesGet($content_type, $authorization, $accept)
    {
        list($response) = $this->referencesDeparturesGetWithHttpInfo($content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesDeparturesGetWithHttpInfo
     *
     * Справочник мест отправления
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesDeparturesGetWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2009';
        $request = $this->referencesDeparturesGetRequest($content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2009',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesDeparturesGetAsync
     *
     * Справочник мест отправления
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesDeparturesGetAsync($content_type, $authorization, $accept)
    {
        return $this->referencesDeparturesGetAsyncWithHttpInfo($content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesDeparturesGetAsyncWithHttpInfo
     *
     * Справочник мест отправления
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesDeparturesGetAsyncWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2009';
        $request = $this->referencesDeparturesGetRequest($content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesDeparturesGet'
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesDeparturesGetRequest($content_type, $authorization, $accept)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesDeparturesGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesDeparturesGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesDeparturesGet'
            );
        }

        $resourcePath = '/references/departures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesDestinationsGet
     *
     * Справочник мест отправления
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function referencesDestinationsGet($content_type, $authorization, $accept)
    {
        list($response) = $this->referencesDestinationsGetWithHttpInfo($content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesDestinationsGetWithHttpInfo
     *
     * Справочник мест отправления
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesDestinationsGetWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->referencesDestinationsGetRequest($content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesDestinationsGetAsync
     *
     * Справочник мест отправления
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesDestinationsGetAsync($content_type, $authorization, $accept)
    {
        return $this->referencesDestinationsGetAsyncWithHttpInfo($content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesDestinationsGetAsyncWithHttpInfo
     *
     * Справочник мест отправления
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesDestinationsGetAsyncWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->referencesDestinationsGetRequest($content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesDestinationsGet'
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesDestinationsGetRequest($content_type, $authorization, $accept)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesDestinationsGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesDestinationsGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesDestinationsGet'
            );
        }

        $resourcePath = '/references/destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['applications/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['applications/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesHotelReviewsGet
     *
     * Получение отызвов об отеле
     *
     * @param  int $hotel_id Идентификатор отеля (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20013
     */
    public function referencesHotelReviewsGet($hotel_id, $content_type, $authorization, $accept)
    {
        list($response) = $this->referencesHotelReviewsGetWithHttpInfo($hotel_id, $content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesHotelReviewsGetWithHttpInfo
     *
     * Получение отызвов об отеле
     *
     * @param  int $hotel_id Идентификатор отеля (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesHotelReviewsGetWithHttpInfo($hotel_id, $content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20013';
        $request = $this->referencesHotelReviewsGetRequest($hotel_id, $content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesHotelReviewsGetAsync
     *
     * Получение отызвов об отеле
     *
     * @param  int $hotel_id Идентификатор отеля (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesHotelReviewsGetAsync($hotel_id, $content_type, $authorization, $accept)
    {
        return $this->referencesHotelReviewsGetAsyncWithHttpInfo($hotel_id, $content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesHotelReviewsGetAsyncWithHttpInfo
     *
     * Получение отызвов об отеле
     *
     * @param  int $hotel_id Идентификатор отеля (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesHotelReviewsGetAsyncWithHttpInfo($hotel_id, $content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20013';
        $request = $this->referencesHotelReviewsGetRequest($hotel_id, $content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesHotelReviewsGet'
     *
     * @param  int $hotel_id Идентификатор отеля (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesHotelReviewsGetRequest($hotel_id, $content_type, $authorization, $accept)
    {
        // verify the required parameter 'hotel_id' is set
        if ($hotel_id === null || (is_array($hotel_id) && count($hotel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hotel_id when calling referencesHotelReviewsGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesHotelReviewsGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesHotelReviewsGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesHotelReviewsGet'
            );
        }

        $resourcePath = '/references/hotel_reviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($hotel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'hotel_id' . '}',
                ObjectSerializer::toPathValue($hotel_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesHotelsGet
     *
     * Справочник отелей
     *
     * @param  string $hotel_ids Массив ID отелей через запятую (required)
     * @param  string $region_ids Массив Id стран или городов через запятую (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20011
     */
    public function referencesHotelsGet($hotel_ids, $region_ids, $content_type, $authorization, $accept)
    {
        list($response) = $this->referencesHotelsGetWithHttpInfo($hotel_ids, $region_ids, $content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesHotelsGetWithHttpInfo
     *
     * Справочник отелей
     *
     * @param  string $hotel_ids Массив ID отелей через запятую (required)
     * @param  string $region_ids Массив Id стран или городов через запятую (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesHotelsGetWithHttpInfo($hotel_ids, $region_ids, $content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20011';
        $request = $this->referencesHotelsGetRequest($hotel_ids, $region_ids, $content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesHotelsGetAsync
     *
     * Справочник отелей
     *
     * @param  string $hotel_ids Массив ID отелей через запятую (required)
     * @param  string $region_ids Массив Id стран или городов через запятую (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesHotelsGetAsync($hotel_ids, $region_ids, $content_type, $authorization, $accept)
    {
        return $this->referencesHotelsGetAsyncWithHttpInfo($hotel_ids, $region_ids, $content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesHotelsGetAsyncWithHttpInfo
     *
     * Справочник отелей
     *
     * @param  string $hotel_ids Массив ID отелей через запятую (required)
     * @param  string $region_ids Массив Id стран или городов через запятую (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesHotelsGetAsyncWithHttpInfo($hotel_ids, $region_ids, $content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20011';
        $request = $this->referencesHotelsGetRequest($hotel_ids, $region_ids, $content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesHotelsGet'
     *
     * @param  string $hotel_ids Массив ID отелей через запятую (required)
     * @param  string $region_ids Массив Id стран или городов через запятую (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesHotelsGetRequest($hotel_ids, $region_ids, $content_type, $authorization, $accept)
    {
        // verify the required parameter 'hotel_ids' is set
        if ($hotel_ids === null || (is_array($hotel_ids) && count($hotel_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hotel_ids when calling referencesHotelsGet'
            );
        }
        // verify the required parameter 'region_ids' is set
        if ($region_ids === null || (is_array($region_ids) && count($region_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $region_ids when calling referencesHotelsGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesHotelsGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesHotelsGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesHotelsGet'
            );
        }

        $resourcePath = '/references/hotels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($hotel_ids !== null) {
            $queryParams['hotel_ids'] = ObjectSerializer::toQueryValue($hotel_ids, null);
        }
        // query params
        if ($region_ids !== null) {
            $queryParams['region_ids'] = ObjectSerializer::toQueryValue($region_ids, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesHotelsImagesPost
     *
     * Получение только изображений отелей
     *
     * @param  string $hotel_ids список id отелей через запятую, максимальное количество отелей - 100 (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20012
     */
    public function referencesHotelsImagesPost($hotel_ids, $content_type, $authorization, $accept)
    {
        list($response) = $this->referencesHotelsImagesPostWithHttpInfo($hotel_ids, $content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesHotelsImagesPostWithHttpInfo
     *
     * Получение только изображений отелей
     *
     * @param  string $hotel_ids список id отелей через запятую, максимальное количество отелей - 100 (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesHotelsImagesPostWithHttpInfo($hotel_ids, $content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->referencesHotelsImagesPostRequest($hotel_ids, $content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesHotelsImagesPostAsync
     *
     * Получение только изображений отелей
     *
     * @param  string $hotel_ids список id отелей через запятую, максимальное количество отелей - 100 (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesHotelsImagesPostAsync($hotel_ids, $content_type, $authorization, $accept)
    {
        return $this->referencesHotelsImagesPostAsyncWithHttpInfo($hotel_ids, $content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesHotelsImagesPostAsyncWithHttpInfo
     *
     * Получение только изображений отелей
     *
     * @param  string $hotel_ids список id отелей через запятую, максимальное количество отелей - 100 (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesHotelsImagesPostAsyncWithHttpInfo($hotel_ids, $content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->referencesHotelsImagesPostRequest($hotel_ids, $content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesHotelsImagesPost'
     *
     * @param  string $hotel_ids список id отелей через запятую, максимальное количество отелей - 100 (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesHotelsImagesPostRequest($hotel_ids, $content_type, $authorization, $accept)
    {
        // verify the required parameter 'hotel_ids' is set
        if ($hotel_ids === null || (is_array($hotel_ids) && count($hotel_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hotel_ids when calling referencesHotelsImagesPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesHotelsImagesPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesHotelsImagesPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesHotelsImagesPost'
            );
        }

        $resourcePath = '/references/hotels_images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($hotel_ids !== null) {
            $queryParams['hotel_ids'] = ObjectSerializer::toQueryValue($hotel_ids, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesLiveInfoPromoGet
     *
     * Метод который возвращает динамические тексты под сигаретой
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20018
     */
    public function referencesLiveInfoPromoGet($content_type, $authorization, $accept)
    {
        list($response) = $this->referencesLiveInfoPromoGetWithHttpInfo($content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesLiveInfoPromoGetWithHttpInfo
     *
     * Метод который возвращает динамические тексты под сигаретой
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20018, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesLiveInfoPromoGetWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20018';
        $request = $this->referencesLiveInfoPromoGetRequest($content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20018',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesLiveInfoPromoGetAsync
     *
     * Метод который возвращает динамические тексты под сигаретой
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesLiveInfoPromoGetAsync($content_type, $authorization, $accept)
    {
        return $this->referencesLiveInfoPromoGetAsyncWithHttpInfo($content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesLiveInfoPromoGetAsyncWithHttpInfo
     *
     * Метод который возвращает динамические тексты под сигаретой
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesLiveInfoPromoGetAsyncWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20018';
        $request = $this->referencesLiveInfoPromoGetRequest($content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesLiveInfoPromoGet'
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesLiveInfoPromoGetRequest($content_type, $authorization, $accept)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesLiveInfoPromoGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesLiveInfoPromoGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesLiveInfoPromoGet'
            );
        }

        $resourcePath = '/references/live_info_promo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesOperatorsGet
     *
     * Справочник операторов
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2008
     */
    public function referencesOperatorsGet($content_type, $authorization, $accept)
    {
        list($response) = $this->referencesOperatorsGetWithHttpInfo($content_type, $authorization, $accept);
        return $response;
    }

    /**
     * Operation referencesOperatorsGetWithHttpInfo
     *
     * Справочник операторов
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesOperatorsGetWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->referencesOperatorsGetRequest($content_type, $authorization, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesOperatorsGetAsync
     *
     * Справочник операторов
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesOperatorsGetAsync($content_type, $authorization, $accept)
    {
        return $this->referencesOperatorsGetAsyncWithHttpInfo($content_type, $authorization, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesOperatorsGetAsyncWithHttpInfo
     *
     * Справочник операторов
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesOperatorsGetAsyncWithHttpInfo($content_type, $authorization, $accept)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->referencesOperatorsGetRequest($content_type, $authorization, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesOperatorsGet'
     *
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesOperatorsGetRequest($content_type, $authorization, $accept)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesOperatorsGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesOperatorsGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesOperatorsGet'
            );
        }

        $resourcePath = '/references/operators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesPlacesGet
     *
     * Метод который возвращает все страны и отдых по впечатлениям по приоритету
     *
     * @param  string $from_city Город откуда планируется вылетать (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20015
     */
    public function referencesPlacesGet($from_city, $content_type, $authorization, $accept, $search_type = null)
    {
        list($response) = $this->referencesPlacesGetWithHttpInfo($from_city, $content_type, $authorization, $accept, $search_type);
        return $response;
    }

    /**
     * Operation referencesPlacesGetWithHttpInfo
     *
     * Метод который возвращает все страны и отдых по впечатлениям по приоритету
     *
     * @param  string $from_city Город откуда планируется вылетать (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesPlacesGetWithHttpInfo($from_city, $content_type, $authorization, $accept, $search_type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20015';
        $request = $this->referencesPlacesGetRequest($from_city, $content_type, $authorization, $accept, $search_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20015',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesPlacesGetAsync
     *
     * Метод который возвращает все страны и отдых по впечатлениям по приоритету
     *
     * @param  string $from_city Город откуда планируется вылетать (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesPlacesGetAsync($from_city, $content_type, $authorization, $accept, $search_type = null)
    {
        return $this->referencesPlacesGetAsyncWithHttpInfo($from_city, $content_type, $authorization, $accept, $search_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesPlacesGetAsyncWithHttpInfo
     *
     * Метод который возвращает все страны и отдых по впечатлениям по приоритету
     *
     * @param  string $from_city Город откуда планируется вылетать (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesPlacesGetAsyncWithHttpInfo($from_city, $content_type, $authorization, $accept, $search_type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20015';
        $request = $this->referencesPlacesGetRequest($from_city, $content_type, $authorization, $accept, $search_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesPlacesGet'
     *
     * @param  string $from_city Город откуда планируется вылетать (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesPlacesGetRequest($from_city, $content_type, $authorization, $accept, $search_type = null)
    {
        // verify the required parameter 'from_city' is set
        if ($from_city === null || (is_array($from_city) && count($from_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_city when calling referencesPlacesGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesPlacesGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesPlacesGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesPlacesGet'
            );
        }

        $resourcePath = '/references/places';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_city !== null) {
            $queryParams['from_city'] = ObjectSerializer::toQueryValue($from_city, null);
        }
        // query params
        if ($search_type !== null) {
            $queryParams['search_type'] = ObjectSerializer::toQueryValue($search_type, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesSearchCalendarDurationGet
     *
     * Минимальные цены на дату с разной длительностью тура
     *
     * @param  \DateTime $start_date Дата вылета (required)
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  float $adults Количество взрослых (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float[] $kids Возраста детей (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20022
     */
    public function referencesSearchCalendarDurationGet($start_date, $place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids = null)
    {
        list($response) = $this->referencesSearchCalendarDurationGetWithHttpInfo($start_date, $place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids);
        return $response;
    }

    /**
     * Operation referencesSearchCalendarDurationGetWithHttpInfo
     *
     * Минимальные цены на дату с разной длительностью тура
     *
     * @param  \DateTime $start_date Дата вылета (required)
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  float $adults Количество взрослых (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float[] $kids Возраста детей (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20022, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesSearchCalendarDurationGetWithHttpInfo($start_date, $place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20022';
        $request = $this->referencesSearchCalendarDurationGetRequest($start_date, $place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20022',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesSearchCalendarDurationGetAsync
     *
     * Минимальные цены на дату с разной длительностью тура
     *
     * @param  \DateTime $start_date Дата вылета (required)
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  float $adults Количество взрослых (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float[] $kids Возраста детей (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesSearchCalendarDurationGetAsync($start_date, $place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids = null)
    {
        return $this->referencesSearchCalendarDurationGetAsyncWithHttpInfo($start_date, $place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesSearchCalendarDurationGetAsyncWithHttpInfo
     *
     * Минимальные цены на дату с разной длительностью тура
     *
     * @param  \DateTime $start_date Дата вылета (required)
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  float $adults Количество взрослых (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float[] $kids Возраста детей (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesSearchCalendarDurationGetAsyncWithHttpInfo($start_date, $place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20022';
        $request = $this->referencesSearchCalendarDurationGetRequest($start_date, $place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesSearchCalendarDurationGet'
     *
     * @param  \DateTime $start_date Дата вылета (required)
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  float $adults Количество взрослых (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float[] $kids Возраста детей (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesSearchCalendarDurationGetRequest($start_date, $place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids = null)
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling referencesSearchCalendarDurationGet'
            );
        }
        // verify the required parameter 'place_id' is set
        if ($place_id === null || (is_array($place_id) && count($place_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $place_id when calling referencesSearchCalendarDurationGet'
            );
        }
        // verify the required parameter 'departure_id' is set
        if ($departure_id === null || (is_array($departure_id) && count($departure_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departure_id when calling referencesSearchCalendarDurationGet'
            );
        }
        // verify the required parameter 'adults' is set
        if ($adults === null || (is_array($adults) && count($adults) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adults when calling referencesSearchCalendarDurationGet'
            );
        }
        // verify the required parameter 'search_type' is set
        if ($search_type === null || (is_array($search_type) && count($search_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_type when calling referencesSearchCalendarDurationGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesSearchCalendarDurationGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesSearchCalendarDurationGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesSearchCalendarDurationGet'
            );
        }

        $resourcePath = '/references/search_calendar_duration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date, null);
        }
        // query params
        if ($place_id !== null) {
            $queryParams['place_id'] = ObjectSerializer::toQueryValue($place_id, null);
        }
        // query params
        if ($departure_id !== null) {
            $queryParams['departure_id'] = ObjectSerializer::toQueryValue($departure_id, null);
        }
        // query params
        if ($adults !== null) {
            $queryParams['adults'] = ObjectSerializer::toQueryValue($adults, null);
        }
        // query params
        if ($search_type !== null) {
            $queryParams['search_type'] = ObjectSerializer::toQueryValue($search_type, null);
        }
        // query params
        if (is_array($kids)) {
            $kids = ObjectSerializer::serializeCollection($kids, 'multi', true);
        }
        if ($kids !== null) {
            $queryParams['kids'] = ObjectSerializer::toQueryValue($kids, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesSearchCalendarMonthsGet
     *
     * Минимальные цены за месяц на год
     *
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  float $adults Количество взрослых (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float[] $kids Возраста детей (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20021
     */
    public function referencesSearchCalendarMonthsGet($place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids = null)
    {
        list($response) = $this->referencesSearchCalendarMonthsGetWithHttpInfo($place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids);
        return $response;
    }

    /**
     * Operation referencesSearchCalendarMonthsGetWithHttpInfo
     *
     * Минимальные цены за месяц на год
     *
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  float $adults Количество взрослых (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float[] $kids Возраста детей (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20021, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesSearchCalendarMonthsGetWithHttpInfo($place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20021';
        $request = $this->referencesSearchCalendarMonthsGetRequest($place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20021',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesSearchCalendarMonthsGetAsync
     *
     * Минимальные цены за месяц на год
     *
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  float $adults Количество взрослых (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float[] $kids Возраста детей (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesSearchCalendarMonthsGetAsync($place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids = null)
    {
        return $this->referencesSearchCalendarMonthsGetAsyncWithHttpInfo($place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesSearchCalendarMonthsGetAsyncWithHttpInfo
     *
     * Минимальные цены за месяц на год
     *
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  float $adults Количество взрослых (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float[] $kids Возраста детей (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesSearchCalendarMonthsGetAsyncWithHttpInfo($place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20021';
        $request = $this->referencesSearchCalendarMonthsGetRequest($place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesSearchCalendarMonthsGet'
     *
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  float $adults Количество взрослых (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float[] $kids Возраста детей (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesSearchCalendarMonthsGetRequest($place_id, $departure_id, $adults, $search_type, $content_type, $authorization, $accept, $kids = null)
    {
        // verify the required parameter 'place_id' is set
        if ($place_id === null || (is_array($place_id) && count($place_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $place_id when calling referencesSearchCalendarMonthsGet'
            );
        }
        // verify the required parameter 'departure_id' is set
        if ($departure_id === null || (is_array($departure_id) && count($departure_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departure_id when calling referencesSearchCalendarMonthsGet'
            );
        }
        // verify the required parameter 'adults' is set
        if ($adults === null || (is_array($adults) && count($adults) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adults when calling referencesSearchCalendarMonthsGet'
            );
        }
        // verify the required parameter 'search_type' is set
        if ($search_type === null || (is_array($search_type) && count($search_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_type when calling referencesSearchCalendarMonthsGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesSearchCalendarMonthsGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesSearchCalendarMonthsGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesSearchCalendarMonthsGet'
            );
        }

        $resourcePath = '/references/search_calendar_months';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($place_id !== null) {
            $queryParams['place_id'] = ObjectSerializer::toQueryValue($place_id, null);
        }
        // query params
        if ($departure_id !== null) {
            $queryParams['departure_id'] = ObjectSerializer::toQueryValue($departure_id, null);
        }
        // query params
        if ($adults !== null) {
            $queryParams['adults'] = ObjectSerializer::toQueryValue($adults, null);
        }
        // query params
        if (is_array($kids)) {
            $kids = ObjectSerializer::serializeCollection($kids, 'multi', true);
        }
        if ($kids !== null) {
            $queryParams['kids'] = ObjectSerializer::toQueryValue($kids, null);
        }
        // query params
        if ($search_type !== null) {
            $queryParams['search_type'] = ObjectSerializer::toQueryValue($search_type, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesSearchCalendarStartDateGet
     *
     * Минимальные цены на тур 7 ночей 2 взрослых
     *
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  \DateTime $start_date Минимальная дата (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float $range Количество месяцев (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20023
     */
    public function referencesSearchCalendarStartDateGet($place_id, $departure_id, $search_type, $start_date, $content_type, $authorization, $accept, $range = '0')
    {
        list($response) = $this->referencesSearchCalendarStartDateGetWithHttpInfo($place_id, $departure_id, $search_type, $start_date, $content_type, $authorization, $accept, $range);
        return $response;
    }

    /**
     * Operation referencesSearchCalendarStartDateGetWithHttpInfo
     *
     * Минимальные цены на тур 7 ночей 2 взрослых
     *
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  \DateTime $start_date Минимальная дата (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float $range Количество месяцев (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20023, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesSearchCalendarStartDateGetWithHttpInfo($place_id, $departure_id, $search_type, $start_date, $content_type, $authorization, $accept, $range = '0')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20023';
        $request = $this->referencesSearchCalendarStartDateGetRequest($place_id, $departure_id, $search_type, $start_date, $content_type, $authorization, $accept, $range);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20023',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesSearchCalendarStartDateGetAsync
     *
     * Минимальные цены на тур 7 ночей 2 взрослых
     *
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  \DateTime $start_date Минимальная дата (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float $range Количество месяцев (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesSearchCalendarStartDateGetAsync($place_id, $departure_id, $search_type, $start_date, $content_type, $authorization, $accept, $range = '0')
    {
        return $this->referencesSearchCalendarStartDateGetAsyncWithHttpInfo($place_id, $departure_id, $search_type, $start_date, $content_type, $authorization, $accept, $range)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesSearchCalendarStartDateGetAsyncWithHttpInfo
     *
     * Минимальные цены на тур 7 ночей 2 взрослых
     *
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  \DateTime $start_date Минимальная дата (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float $range Количество месяцев (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesSearchCalendarStartDateGetAsyncWithHttpInfo($place_id, $departure_id, $search_type, $start_date, $content_type, $authorization, $accept, $range = '0')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20023';
        $request = $this->referencesSearchCalendarStartDateGetRequest($place_id, $departure_id, $search_type, $start_date, $content_type, $authorization, $accept, $range);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesSearchCalendarStartDateGet'
     *
     * @param  float $place_id ID места прилета (required)
     * @param  float $departure_id ID города вылета (required)
     * @param  string $search_type Тип поискового запроса - по турам или по отелям без перелета (required)
     * @param  \DateTime $start_date Минимальная дата (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  float $range Количество месяцев (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesSearchCalendarStartDateGetRequest($place_id, $departure_id, $search_type, $start_date, $content_type, $authorization, $accept, $range = '0')
    {
        // verify the required parameter 'place_id' is set
        if ($place_id === null || (is_array($place_id) && count($place_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $place_id when calling referencesSearchCalendarStartDateGet'
            );
        }
        // verify the required parameter 'departure_id' is set
        if ($departure_id === null || (is_array($departure_id) && count($departure_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departure_id when calling referencesSearchCalendarStartDateGet'
            );
        }
        // verify the required parameter 'search_type' is set
        if ($search_type === null || (is_array($search_type) && count($search_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_type when calling referencesSearchCalendarStartDateGet'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling referencesSearchCalendarStartDateGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesSearchCalendarStartDateGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesSearchCalendarStartDateGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesSearchCalendarStartDateGet'
            );
        }

        $resourcePath = '/references/search_calendar_start_date';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($place_id !== null) {
            $queryParams['place_id'] = ObjectSerializer::toQueryValue($place_id, null);
        }
        // query params
        if ($departure_id !== null) {
            $queryParams['departure_id'] = ObjectSerializer::toQueryValue($departure_id, null);
        }
        // query params
        if ($search_type !== null) {
            $queryParams['search_type'] = ObjectSerializer::toQueryValue($search_type, null);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referencesUnavailableDatesGet
     *
     * Метод который возвращает недоступные для поиска даты
     *
     * @param  string $city_from Город откуда планируется вылетать (required)
     * @param  string $country_to Страна куда планируется лететь (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20019
     */
    public function referencesUnavailableDatesGet($city_from, $country_to, $content_type, $authorization, $accept, $search_type = null)
    {
        list($response) = $this->referencesUnavailableDatesGetWithHttpInfo($city_from, $country_to, $content_type, $authorization, $accept, $search_type);
        return $response;
    }

    /**
     * Operation referencesUnavailableDatesGetWithHttpInfo
     *
     * Метод который возвращает недоступные для поиска даты
     *
     * @param  string $city_from Город откуда планируется вылетать (required)
     * @param  string $country_to Страна куда планируется лететь (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20019, HTTP status code, HTTP response headers (array of strings)
     */
    public function referencesUnavailableDatesGetWithHttpInfo($city_from, $country_to, $content_type, $authorization, $accept, $search_type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20019';
        $request = $this->referencesUnavailableDatesGetRequest($city_from, $country_to, $content_type, $authorization, $accept, $search_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20019',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referencesUnavailableDatesGetAsync
     *
     * Метод который возвращает недоступные для поиска даты
     *
     * @param  string $city_from Город откуда планируется вылетать (required)
     * @param  string $country_to Страна куда планируется лететь (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesUnavailableDatesGetAsync($city_from, $country_to, $content_type, $authorization, $accept, $search_type = null)
    {
        return $this->referencesUnavailableDatesGetAsyncWithHttpInfo($city_from, $country_to, $content_type, $authorization, $accept, $search_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referencesUnavailableDatesGetAsyncWithHttpInfo
     *
     * Метод который возвращает недоступные для поиска даты
     *
     * @param  string $city_from Город откуда планируется вылетать (required)
     * @param  string $country_to Страна куда планируется лететь (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referencesUnavailableDatesGetAsyncWithHttpInfo($city_from, $country_to, $content_type, $authorization, $accept, $search_type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20019';
        $request = $this->referencesUnavailableDatesGetRequest($city_from, $country_to, $content_type, $authorization, $accept, $search_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referencesUnavailableDatesGet'
     *
     * @param  string $city_from Город откуда планируется вылетать (required)
     * @param  string $country_to Страна куда планируется лететь (required)
     * @param  string $content_type Тип возвращаемых данных (required)
     * @param  string $authorization Токен авторизации партнера (required)
     * @param  string $accept API версия (required)
     * @param  string $search_type Тип поиска (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function referencesUnavailableDatesGetRequest($city_from, $country_to, $content_type, $authorization, $accept, $search_type = null)
    {
        // verify the required parameter 'city_from' is set
        if ($city_from === null || (is_array($city_from) && count($city_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city_from when calling referencesUnavailableDatesGet'
            );
        }
        // verify the required parameter 'country_to' is set
        if ($country_to === null || (is_array($country_to) && count($country_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_to when calling referencesUnavailableDatesGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling referencesUnavailableDatesGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling referencesUnavailableDatesGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling referencesUnavailableDatesGet'
            );
        }

        $resourcePath = '/references/unavailable_dates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($city_from !== null) {
            $queryParams['city_from'] = ObjectSerializer::toQueryValue($city_from, null);
        }
        // query params
        if ($country_to !== null) {
            $queryParams['country_to'] = ObjectSerializer::toQueryValue($country_to, null);
        }
        // query params
        if ($search_type !== null) {
            $queryParams['search_type'] = ObjectSerializer::toQueryValue($search_type, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
