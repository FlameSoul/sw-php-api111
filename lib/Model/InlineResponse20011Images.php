<?php
/**
 * InlineResponse20011Images
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20011Images Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20011Images implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_11_images';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'x90' => 'string',
        'x180' => 'string',
        'x180x132' => 'string',
        'x250' => 'string',
        'x290x135' => 'string',
        'x245x240' => 'string',
        'x500' => 'string',
        'x900' => 'string',
        'x55x56' => 'string',
        'x100x115' => 'string',
        'x170x100' => 'string',
        'x310' => 'string',
        'x270x150' => 'string',
        'x270x200' => 'string',
        'x620' => 'string',
        'x800x600' => 'string',
        'x800x600x' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'x90' => null,
        'x180' => null,
        'x180x132' => null,
        'x250' => null,
        'x290x135' => null,
        'x245x240' => null,
        'x500' => null,
        'x900' => null,
        'x55x56' => null,
        'x100x115' => null,
        'x170x100' => null,
        'x310' => null,
        'x270x150' => null,
        'x270x200' => null,
        'x620' => null,
        'x800x600' => null,
        'x800x600x' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'x90' => 'x90',
        'x180' => 'x180',
        'x180x132' => 'x180x132',
        'x250' => 'x250',
        'x290x135' => 'x290x135',
        'x245x240' => 'x245x240',
        'x500' => 'x500',
        'x900' => 'x900',
        'x55x56' => 'x55x56',
        'x100x115' => 'x100x115',
        'x170x100' => 'x170x100',
        'x310' => 'x310',
        'x270x150' => 'x270x150',
        'x270x200' => 'x270x200',
        'x620' => 'x620',
        'x800x600' => 'x800x600',
        'x800x600x' => 'x800x600x'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'x90' => 'setX90',
        'x180' => 'setX180',
        'x180x132' => 'setX180x132',
        'x250' => 'setX250',
        'x290x135' => 'setX290x135',
        'x245x240' => 'setX245x240',
        'x500' => 'setX500',
        'x900' => 'setX900',
        'x55x56' => 'setX55x56',
        'x100x115' => 'setX100x115',
        'x170x100' => 'setX170x100',
        'x310' => 'setX310',
        'x270x150' => 'setX270x150',
        'x270x200' => 'setX270x200',
        'x620' => 'setX620',
        'x800x600' => 'setX800x600',
        'x800x600x' => 'setX800x600x'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'x90' => 'getX90',
        'x180' => 'getX180',
        'x180x132' => 'getX180x132',
        'x250' => 'getX250',
        'x290x135' => 'getX290x135',
        'x245x240' => 'getX245x240',
        'x500' => 'getX500',
        'x900' => 'getX900',
        'x55x56' => 'getX55x56',
        'x100x115' => 'getX100x115',
        'x170x100' => 'getX170x100',
        'x310' => 'getX310',
        'x270x150' => 'getX270x150',
        'x270x200' => 'getX270x200',
        'x620' => 'getX620',
        'x800x600' => 'getX800x600',
        'x800x600x' => 'getX800x600x'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['x90'] = isset($data['x90']) ? $data['x90'] : null;
        $this->container['x180'] = isset($data['x180']) ? $data['x180'] : null;
        $this->container['x180x132'] = isset($data['x180x132']) ? $data['x180x132'] : null;
        $this->container['x250'] = isset($data['x250']) ? $data['x250'] : null;
        $this->container['x290x135'] = isset($data['x290x135']) ? $data['x290x135'] : null;
        $this->container['x245x240'] = isset($data['x245x240']) ? $data['x245x240'] : null;
        $this->container['x500'] = isset($data['x500']) ? $data['x500'] : null;
        $this->container['x900'] = isset($data['x900']) ? $data['x900'] : null;
        $this->container['x55x56'] = isset($data['x55x56']) ? $data['x55x56'] : null;
        $this->container['x100x115'] = isset($data['x100x115']) ? $data['x100x115'] : null;
        $this->container['x170x100'] = isset($data['x170x100']) ? $data['x170x100'] : null;
        $this->container['x310'] = isset($data['x310']) ? $data['x310'] : null;
        $this->container['x270x150'] = isset($data['x270x150']) ? $data['x270x150'] : null;
        $this->container['x270x200'] = isset($data['x270x200']) ? $data['x270x200'] : null;
        $this->container['x620'] = isset($data['x620']) ? $data['x620'] : null;
        $this->container['x800x600'] = isset($data['x800x600']) ? $data['x800x600'] : null;
        $this->container['x800x600x'] = isset($data['x800x600x']) ? $data['x800x600x'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets x90
     *
     * @return string
     */
    public function getX90()
    {
        return $this->container['x90'];
    }

    /**
     * Sets x90
     *
     * @param string $x90 x90
     *
     * @return $this
     */
    public function setX90($x90)
    {
        $this->container['x90'] = $x90;

        return $this;
    }

    /**
     * Gets x180
     *
     * @return string
     */
    public function getX180()
    {
        return $this->container['x180'];
    }

    /**
     * Sets x180
     *
     * @param string $x180 x180
     *
     * @return $this
     */
    public function setX180($x180)
    {
        $this->container['x180'] = $x180;

        return $this;
    }

    /**
     * Gets x180x132
     *
     * @return string
     */
    public function getX180x132()
    {
        return $this->container['x180x132'];
    }

    /**
     * Sets x180x132
     *
     * @param string $x180x132 x180x132
     *
     * @return $this
     */
    public function setX180x132($x180x132)
    {
        $this->container['x180x132'] = $x180x132;

        return $this;
    }

    /**
     * Gets x250
     *
     * @return string
     */
    public function getX250()
    {
        return $this->container['x250'];
    }

    /**
     * Sets x250
     *
     * @param string $x250 x250
     *
     * @return $this
     */
    public function setX250($x250)
    {
        $this->container['x250'] = $x250;

        return $this;
    }

    /**
     * Gets x290x135
     *
     * @return string
     */
    public function getX290x135()
    {
        return $this->container['x290x135'];
    }

    /**
     * Sets x290x135
     *
     * @param string $x290x135 x290x135
     *
     * @return $this
     */
    public function setX290x135($x290x135)
    {
        $this->container['x290x135'] = $x290x135;

        return $this;
    }

    /**
     * Gets x245x240
     *
     * @return string
     */
    public function getX245x240()
    {
        return $this->container['x245x240'];
    }

    /**
     * Sets x245x240
     *
     * @param string $x245x240 x245x240
     *
     * @return $this
     */
    public function setX245x240($x245x240)
    {
        $this->container['x245x240'] = $x245x240;

        return $this;
    }

    /**
     * Gets x500
     *
     * @return string
     */
    public function getX500()
    {
        return $this->container['x500'];
    }

    /**
     * Sets x500
     *
     * @param string $x500 x500
     *
     * @return $this
     */
    public function setX500($x500)
    {
        $this->container['x500'] = $x500;

        return $this;
    }

    /**
     * Gets x900
     *
     * @return string
     */
    public function getX900()
    {
        return $this->container['x900'];
    }

    /**
     * Sets x900
     *
     * @param string $x900 x900
     *
     * @return $this
     */
    public function setX900($x900)
    {
        $this->container['x900'] = $x900;

        return $this;
    }

    /**
     * Gets x55x56
     *
     * @return string
     */
    public function getX55x56()
    {
        return $this->container['x55x56'];
    }

    /**
     * Sets x55x56
     *
     * @param string $x55x56 x55x56
     *
     * @return $this
     */
    public function setX55x56($x55x56)
    {
        $this->container['x55x56'] = $x55x56;

        return $this;
    }

    /**
     * Gets x100x115
     *
     * @return string
     */
    public function getX100x115()
    {
        return $this->container['x100x115'];
    }

    /**
     * Sets x100x115
     *
     * @param string $x100x115 x100x115
     *
     * @return $this
     */
    public function setX100x115($x100x115)
    {
        $this->container['x100x115'] = $x100x115;

        return $this;
    }

    /**
     * Gets x170x100
     *
     * @return string
     */
    public function getX170x100()
    {
        return $this->container['x170x100'];
    }

    /**
     * Sets x170x100
     *
     * @param string $x170x100 x170x100
     *
     * @return $this
     */
    public function setX170x100($x170x100)
    {
        $this->container['x170x100'] = $x170x100;

        return $this;
    }

    /**
     * Gets x310
     *
     * @return string
     */
    public function getX310()
    {
        return $this->container['x310'];
    }

    /**
     * Sets x310
     *
     * @param string $x310 x310
     *
     * @return $this
     */
    public function setX310($x310)
    {
        $this->container['x310'] = $x310;

        return $this;
    }

    /**
     * Gets x270x150
     *
     * @return string
     */
    public function getX270x150()
    {
        return $this->container['x270x150'];
    }

    /**
     * Sets x270x150
     *
     * @param string $x270x150 x270x150
     *
     * @return $this
     */
    public function setX270x150($x270x150)
    {
        $this->container['x270x150'] = $x270x150;

        return $this;
    }

    /**
     * Gets x270x200
     *
     * @return string
     */
    public function getX270x200()
    {
        return $this->container['x270x200'];
    }

    /**
     * Sets x270x200
     *
     * @param string $x270x200 x270x200
     *
     * @return $this
     */
    public function setX270x200($x270x200)
    {
        $this->container['x270x200'] = $x270x200;

        return $this;
    }

    /**
     * Gets x620
     *
     * @return string
     */
    public function getX620()
    {
        return $this->container['x620'];
    }

    /**
     * Sets x620
     *
     * @param string $x620 x620
     *
     * @return $this
     */
    public function setX620($x620)
    {
        $this->container['x620'] = $x620;

        return $this;
    }

    /**
     * Gets x800x600
     *
     * @return string
     */
    public function getX800x600()
    {
        return $this->container['x800x600'];
    }

    /**
     * Sets x800x600
     *
     * @param string $x800x600 x800x600
     *
     * @return $this
     */
    public function setX800x600($x800x600)
    {
        $this->container['x800x600'] = $x800x600;

        return $this;
    }

    /**
     * Gets x800x600x
     *
     * @return string
     */
    public function getX800x600x()
    {
        return $this->container['x800x600x'];
    }

    /**
     * Sets x800x600x
     *
     * @param string $x800x600x x800x600x
     *
     * @return $this
     */
    public function setX800x600x($x800x600x)
    {
        $this->container['x800x600x'] = $x800x600x;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
