<?php
/**
 * InlineResponse2002HotelRestTypes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2002HotelRestTypes Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002HotelRestTypes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_hotel_rest_types';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cat_kids' => 'float',
        'cat_business' => 'float',
        'cat_couples' => 'float',
        'cat_active' => 'float',
        'cat_family' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cat_kids' => null,
        'cat_business' => null,
        'cat_couples' => null,
        'cat_active' => null,
        'cat_family' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cat_kids' => 'cat_kids',
        'cat_business' => 'cat_business',
        'cat_couples' => 'cat_couples',
        'cat_active' => 'cat_active',
        'cat_family' => 'cat_family'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cat_kids' => 'setCatKids',
        'cat_business' => 'setCatBusiness',
        'cat_couples' => 'setCatCouples',
        'cat_active' => 'setCatActive',
        'cat_family' => 'setCatFamily'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cat_kids' => 'getCatKids',
        'cat_business' => 'getCatBusiness',
        'cat_couples' => 'getCatCouples',
        'cat_active' => 'getCatActive',
        'cat_family' => 'getCatFamily'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cat_kids'] = isset($data['cat_kids']) ? $data['cat_kids'] : null;
        $this->container['cat_business'] = isset($data['cat_business']) ? $data['cat_business'] : null;
        $this->container['cat_couples'] = isset($data['cat_couples']) ? $data['cat_couples'] : null;
        $this->container['cat_active'] = isset($data['cat_active']) ? $data['cat_active'] : null;
        $this->container['cat_family'] = isset($data['cat_family']) ? $data['cat_family'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cat_kids
     *
     * @return float
     */
    public function getCatKids()
    {
        return $this->container['cat_kids'];
    }

    /**
     * Sets cat_kids
     *
     * @param float $cat_kids cat_kids
     *
     * @return $this
     */
    public function setCatKids($cat_kids)
    {
        $this->container['cat_kids'] = $cat_kids;

        return $this;
    }

    /**
     * Gets cat_business
     *
     * @return float
     */
    public function getCatBusiness()
    {
        return $this->container['cat_business'];
    }

    /**
     * Sets cat_business
     *
     * @param float $cat_business cat_business
     *
     * @return $this
     */
    public function setCatBusiness($cat_business)
    {
        $this->container['cat_business'] = $cat_business;

        return $this;
    }

    /**
     * Gets cat_couples
     *
     * @return float
     */
    public function getCatCouples()
    {
        return $this->container['cat_couples'];
    }

    /**
     * Sets cat_couples
     *
     * @param float $cat_couples cat_couples
     *
     * @return $this
     */
    public function setCatCouples($cat_couples)
    {
        $this->container['cat_couples'] = $cat_couples;

        return $this;
    }

    /**
     * Gets cat_active
     *
     * @return float
     */
    public function getCatActive()
    {
        return $this->container['cat_active'];
    }

    /**
     * Sets cat_active
     *
     * @param float $cat_active cat_active
     *
     * @return $this
     */
    public function setCatActive($cat_active)
    {
        $this->container['cat_active'] = $cat_active;

        return $this;
    }

    /**
     * Gets cat_family
     *
     * @return float
     */
    public function getCatFamily()
    {
        return $this->container['cat_family'];
    }

    /**
     * Sets cat_family
     *
     * @param float $cat_family cat_family
     *
     * @return $this
     */
    public function setCatFamily($cat_family)
    {
        $this->container['cat_family'] = $cat_family;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
