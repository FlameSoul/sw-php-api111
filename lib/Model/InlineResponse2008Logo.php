<?php
/**
 * InlineResponse2008Logo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2008Logo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2008Logo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_8_logo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'x1' => '\Swagger\Client\Model\InlineResponse2008LogoX1',
        'x2' => '\Swagger\Client\Model\InlineResponse2008LogoX2',
        'x3' => '\Swagger\Client\Model\InlineResponse2008LogoX3',
        'x130x50' => '\Swagger\Client\Model\InlineResponse2008LogoX130x50',
        'x260x100' => '\Swagger\Client\Model\InlineResponse2008LogoX260x100'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'x1' => null,
        'x2' => null,
        'x3' => null,
        'x130x50' => null,
        'x260x100' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'x1' => 'x1',
        'x2' => 'x2',
        'x3' => 'x3',
        'x130x50' => 'x130x50',
        'x260x100' => 'x260x100'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'x1' => 'setX1',
        'x2' => 'setX2',
        'x3' => 'setX3',
        'x130x50' => 'setX130x50',
        'x260x100' => 'setX260x100'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'x1' => 'getX1',
        'x2' => 'getX2',
        'x3' => 'getX3',
        'x130x50' => 'getX130x50',
        'x260x100' => 'getX260x100'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['x1'] = isset($data['x1']) ? $data['x1'] : null;
        $this->container['x2'] = isset($data['x2']) ? $data['x2'] : null;
        $this->container['x3'] = isset($data['x3']) ? $data['x3'] : null;
        $this->container['x130x50'] = isset($data['x130x50']) ? $data['x130x50'] : null;
        $this->container['x260x100'] = isset($data['x260x100']) ? $data['x260x100'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets x1
     *
     * @return \Swagger\Client\Model\InlineResponse2008LogoX1
     */
    public function getX1()
    {
        return $this->container['x1'];
    }

    /**
     * Sets x1
     *
     * @param \Swagger\Client\Model\InlineResponse2008LogoX1 $x1 x1
     *
     * @return $this
     */
    public function setX1($x1)
    {
        $this->container['x1'] = $x1;

        return $this;
    }

    /**
     * Gets x2
     *
     * @return \Swagger\Client\Model\InlineResponse2008LogoX2
     */
    public function getX2()
    {
        return $this->container['x2'];
    }

    /**
     * Sets x2
     *
     * @param \Swagger\Client\Model\InlineResponse2008LogoX2 $x2 x2
     *
     * @return $this
     */
    public function setX2($x2)
    {
        $this->container['x2'] = $x2;

        return $this;
    }

    /**
     * Gets x3
     *
     * @return \Swagger\Client\Model\InlineResponse2008LogoX3
     */
    public function getX3()
    {
        return $this->container['x3'];
    }

    /**
     * Sets x3
     *
     * @param \Swagger\Client\Model\InlineResponse2008LogoX3 $x3 x3
     *
     * @return $this
     */
    public function setX3($x3)
    {
        $this->container['x3'] = $x3;

        return $this;
    }

    /**
     * Gets x130x50
     *
     * @return \Swagger\Client\Model\InlineResponse2008LogoX130x50
     */
    public function getX130x50()
    {
        return $this->container['x130x50'];
    }

    /**
     * Sets x130x50
     *
     * @param \Swagger\Client\Model\InlineResponse2008LogoX130x50 $x130x50 x130x50
     *
     * @return $this
     */
    public function setX130x50($x130x50)
    {
        $this->container['x130x50'] = $x130x50;

        return $this;
    }

    /**
     * Gets x260x100
     *
     * @return \Swagger\Client\Model\InlineResponse2008LogoX260x100
     */
    public function getX260x100()
    {
        return $this->container['x260x100'];
    }

    /**
     * Sets x260x100
     *
     * @param \Swagger\Client\Model\InlineResponse2008LogoX260x100 $x260x100 x260x100
     *
     * @return $this
     */
    public function setX260x100($x260x100)
    {
        $this->container['x260x100'] = $x260x100;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
