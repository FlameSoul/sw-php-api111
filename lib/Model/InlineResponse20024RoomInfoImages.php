<?php
/**
 * InlineResponse20024RoomInfoImages
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20024RoomInfoImages Class Doc Comment
 *
 * @category Class
 * @description Информация об изображение номера
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20024RoomInfoImages implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_24_room_info_images';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'x100x110' => 'string',
        'x150x110' => 'string',
        'x260x150' => 'string',
        'x900x380' => 'string',
        'x900' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'x100x110' => null,
        'x150x110' => null,
        'x260x150' => null,
        'x900x380' => null,
        'x900' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'x100x110' => 'x100x110',
        'x150x110' => 'x150x110',
        'x260x150' => 'x260x150',
        'x900x380' => 'x900x380',
        'x900' => 'x900'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'x100x110' => 'setX100x110',
        'x150x110' => 'setX150x110',
        'x260x150' => 'setX260x150',
        'x900x380' => 'setX900x380',
        'x900' => 'setX900'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'x100x110' => 'getX100x110',
        'x150x110' => 'getX150x110',
        'x260x150' => 'getX260x150',
        'x900x380' => 'getX900x380',
        'x900' => 'getX900'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['x100x110'] = isset($data['x100x110']) ? $data['x100x110'] : null;
        $this->container['x150x110'] = isset($data['x150x110']) ? $data['x150x110'] : null;
        $this->container['x260x150'] = isset($data['x260x150']) ? $data['x260x150'] : null;
        $this->container['x900x380'] = isset($data['x900x380']) ? $data['x900x380'] : null;
        $this->container['x900'] = isset($data['x900']) ? $data['x900'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID изображения в системе
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets x100x110
     *
     * @return string
     */
    public function getX100x110()
    {
        return $this->container['x100x110'];
    }

    /**
     * Sets x100x110
     *
     * @param string $x100x110 Ссылка на изображение разрешением 100х110
     *
     * @return $this
     */
    public function setX100x110($x100x110)
    {
        $this->container['x100x110'] = $x100x110;

        return $this;
    }

    /**
     * Gets x150x110
     *
     * @return string
     */
    public function getX150x110()
    {
        return $this->container['x150x110'];
    }

    /**
     * Sets x150x110
     *
     * @param string $x150x110 Ссылка на изображение разрешением 150x110
     *
     * @return $this
     */
    public function setX150x110($x150x110)
    {
        $this->container['x150x110'] = $x150x110;

        return $this;
    }

    /**
     * Gets x260x150
     *
     * @return string
     */
    public function getX260x150()
    {
        return $this->container['x260x150'];
    }

    /**
     * Sets x260x150
     *
     * @param string $x260x150 Ссылка на изображение разрешением 260x150
     *
     * @return $this
     */
    public function setX260x150($x260x150)
    {
        $this->container['x260x150'] = $x260x150;

        return $this;
    }

    /**
     * Gets x900x380
     *
     * @return string
     */
    public function getX900x380()
    {
        return $this->container['x900x380'];
    }

    /**
     * Sets x900x380
     *
     * @param string $x900x380 Ссылка на изображение разрешением 900x380
     *
     * @return $this
     */
    public function setX900x380($x900x380)
    {
        $this->container['x900x380'] = $x900x380;

        return $this;
    }

    /**
     * Gets x900
     *
     * @return string
     */
    public function getX900()
    {
        return $this->container['x900'];
    }

    /**
     * Sets x900
     *
     * @param string $x900 Ссылка на изображение разрешением х900
     *
     * @return $this
     */
    public function setX900($x900)
    {
        $this->container['x900'] = $x900;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
