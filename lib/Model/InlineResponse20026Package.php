<?php
/**
 * InlineResponse20026Package
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20026Package Class Doc Comment
 *
 * @category Class
 * @description Информация о пакете
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20026Package implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_26_package';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'tour_id' => 'string',
        'adults_count' => 'int',
        'kids_count' => 'int',
        'kids_ages' => 'int[]',
        'start_date' => '\DateTime',
        'arrival_date' => '\DateTime',
        'nights_count' => 'int',
        'pansion' => '\DateTime',
        'region_name' => 'string',
        'transfer' => 'bool',
        'room_type' => 'string',
        'net_price' => 'float',
        'fuel_charge' => 'float',
        'price' => 'float',
        'dates_info' => '\Swagger\Client\Model\InlineResponse20024DatesInfo',
        'pansion_description' => 'string',
        'pansion_original' => 'string',
        'operator' => '\Swagger\Client\Model\InlineResponse20024Operator',
        'departure' => '\Swagger\Client\Model\InlineResponse20024Departure',
        'available' => 'bool',
        'ordered' => 'bool',
        'search_request' => 'string',
        'instant_confirm' => 'bool',
        'medical_insurance' => 'bool',
        'misc_data' => '\Swagger\Client\Model\InlineResponse20026PackageMiscData',
        'manual' => 'bool',
        'previous_price' => 'int',
        'cheap_type' => 'string',
        'booking_url' => 'string',
        'actualization_url' => 'string',
        'room_info' => '\Swagger\Client\Model\InlineResponse20024RoomInfo',
        'extras' => '\Swagger\Client\Model\InlineResponse20026PackageExtras[]',
        'cancellation_policy' => '\Swagger\Client\Model\InlineResponse20026PackageCancellationPolicy',
        'insurable' => 'bool',
        'link' => 'string',
        'notices' => 'string[]',
        'labels' => '\Swagger\Client\Model\InlineResponse20024Labels[]',
        'availability' => '\Swagger\Client\Model\InlineResponse20024Availability',
        'confirmability_index' => 'float',
        'hotel' => '\Swagger\Client\Model\InlineResponse20026PackageHotel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'tour_id' => null,
        'adults_count' => 'int32',
        'kids_count' => 'int32',
        'kids_ages' => 'int32',
        'start_date' => 'date',
        'arrival_date' => 'date',
        'nights_count' => 'int32',
        'pansion' => 'date',
        'region_name' => null,
        'transfer' => null,
        'room_type' => null,
        'net_price' => 'float',
        'fuel_charge' => 'float',
        'price' => 'float',
        'dates_info' => null,
        'pansion_description' => null,
        'pansion_original' => null,
        'operator' => null,
        'departure' => null,
        'available' => null,
        'ordered' => null,
        'search_request' => null,
        'instant_confirm' => null,
        'medical_insurance' => null,
        'misc_data' => null,
        'manual' => null,
        'previous_price' => 'int32',
        'cheap_type' => null,
        'booking_url' => null,
        'actualization_url' => null,
        'room_info' => null,
        'extras' => null,
        'cancellation_policy' => null,
        'insurable' => null,
        'link' => null,
        'notices' => null,
        'labels' => null,
        'availability' => null,
        'confirmability_index' => 'float',
        'hotel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'tour_id' => 'tour_id',
        'adults_count' => 'adults_count',
        'kids_count' => 'kids_count',
        'kids_ages' => 'kids_ages',
        'start_date' => 'start_date',
        'arrival_date' => 'arrival_date',
        'nights_count' => 'nights_count',
        'pansion' => 'pansion',
        'region_name' => 'region_name',
        'transfer' => 'transfer',
        'room_type' => 'room_type',
        'net_price' => 'net_price',
        'fuel_charge' => 'fuel_charge',
        'price' => 'price',
        'dates_info' => 'dates_info',
        'pansion_description' => 'pansion_description',
        'pansion_original' => 'pansion_original',
        'operator' => 'operator',
        'departure' => 'departure',
        'available' => 'available',
        'ordered' => 'ordered',
        'search_request' => 'search_request',
        'instant_confirm' => 'instant_confirm',
        'medical_insurance' => 'medical_insurance',
        'misc_data' => 'misc_data',
        'manual' => 'manual',
        'previous_price' => 'previous_price',
        'cheap_type' => 'cheap_type',
        'booking_url' => 'booking_url',
        'actualization_url' => 'actualization_url',
        'room_info' => 'room_info',
        'extras' => 'extras',
        'cancellation_policy' => 'cancellation_policy',
        'insurable' => 'insurable',
        'link' => 'link',
        'notices' => 'notices',
        'labels' => 'labels',
        'availability' => 'availability',
        'confirmability_index' => 'confirmability_index',
        'hotel' => 'hotel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'tour_id' => 'setTourId',
        'adults_count' => 'setAdultsCount',
        'kids_count' => 'setKidsCount',
        'kids_ages' => 'setKidsAges',
        'start_date' => 'setStartDate',
        'arrival_date' => 'setArrivalDate',
        'nights_count' => 'setNightsCount',
        'pansion' => 'setPansion',
        'region_name' => 'setRegionName',
        'transfer' => 'setTransfer',
        'room_type' => 'setRoomType',
        'net_price' => 'setNetPrice',
        'fuel_charge' => 'setFuelCharge',
        'price' => 'setPrice',
        'dates_info' => 'setDatesInfo',
        'pansion_description' => 'setPansionDescription',
        'pansion_original' => 'setPansionOriginal',
        'operator' => 'setOperator',
        'departure' => 'setDeparture',
        'available' => 'setAvailable',
        'ordered' => 'setOrdered',
        'search_request' => 'setSearchRequest',
        'instant_confirm' => 'setInstantConfirm',
        'medical_insurance' => 'setMedicalInsurance',
        'misc_data' => 'setMiscData',
        'manual' => 'setManual',
        'previous_price' => 'setPreviousPrice',
        'cheap_type' => 'setCheapType',
        'booking_url' => 'setBookingUrl',
        'actualization_url' => 'setActualizationUrl',
        'room_info' => 'setRoomInfo',
        'extras' => 'setExtras',
        'cancellation_policy' => 'setCancellationPolicy',
        'insurable' => 'setInsurable',
        'link' => 'setLink',
        'notices' => 'setNotices',
        'labels' => 'setLabels',
        'availability' => 'setAvailability',
        'confirmability_index' => 'setConfirmabilityIndex',
        'hotel' => 'setHotel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'tour_id' => 'getTourId',
        'adults_count' => 'getAdultsCount',
        'kids_count' => 'getKidsCount',
        'kids_ages' => 'getKidsAges',
        'start_date' => 'getStartDate',
        'arrival_date' => 'getArrivalDate',
        'nights_count' => 'getNightsCount',
        'pansion' => 'getPansion',
        'region_name' => 'getRegionName',
        'transfer' => 'getTransfer',
        'room_type' => 'getRoomType',
        'net_price' => 'getNetPrice',
        'fuel_charge' => 'getFuelCharge',
        'price' => 'getPrice',
        'dates_info' => 'getDatesInfo',
        'pansion_description' => 'getPansionDescription',
        'pansion_original' => 'getPansionOriginal',
        'operator' => 'getOperator',
        'departure' => 'getDeparture',
        'available' => 'getAvailable',
        'ordered' => 'getOrdered',
        'search_request' => 'getSearchRequest',
        'instant_confirm' => 'getInstantConfirm',
        'medical_insurance' => 'getMedicalInsurance',
        'misc_data' => 'getMiscData',
        'manual' => 'getManual',
        'previous_price' => 'getPreviousPrice',
        'cheap_type' => 'getCheapType',
        'booking_url' => 'getBookingUrl',
        'actualization_url' => 'getActualizationUrl',
        'room_info' => 'getRoomInfo',
        'extras' => 'getExtras',
        'cancellation_policy' => 'getCancellationPolicy',
        'insurable' => 'getInsurable',
        'link' => 'getLink',
        'notices' => 'getNotices',
        'labels' => 'getLabels',
        'availability' => 'getAvailability',
        'confirmability_index' => 'getConfirmabilityIndex',
        'hotel' => 'getHotel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHEAP_TYPE_DIAMOND = 'diamond';
    const CHEAP_TYPE_FIRE = 'fire';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheapTypeAllowableValues()
    {
        return [
            self::CHEAP_TYPE_DIAMOND,
            self::CHEAP_TYPE_FIRE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['tour_id'] = isset($data['tour_id']) ? $data['tour_id'] : null;
        $this->container['adults_count'] = isset($data['adults_count']) ? $data['adults_count'] : null;
        $this->container['kids_count'] = isset($data['kids_count']) ? $data['kids_count'] : null;
        $this->container['kids_ages'] = isset($data['kids_ages']) ? $data['kids_ages'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['arrival_date'] = isset($data['arrival_date']) ? $data['arrival_date'] : null;
        $this->container['nights_count'] = isset($data['nights_count']) ? $data['nights_count'] : null;
        $this->container['pansion'] = isset($data['pansion']) ? $data['pansion'] : null;
        $this->container['region_name'] = isset($data['region_name']) ? $data['region_name'] : null;
        $this->container['transfer'] = isset($data['transfer']) ? $data['transfer'] : null;
        $this->container['room_type'] = isset($data['room_type']) ? $data['room_type'] : null;
        $this->container['net_price'] = isset($data['net_price']) ? $data['net_price'] : null;
        $this->container['fuel_charge'] = isset($data['fuel_charge']) ? $data['fuel_charge'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['dates_info'] = isset($data['dates_info']) ? $data['dates_info'] : null;
        $this->container['pansion_description'] = isset($data['pansion_description']) ? $data['pansion_description'] : null;
        $this->container['pansion_original'] = isset($data['pansion_original']) ? $data['pansion_original'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['departure'] = isset($data['departure']) ? $data['departure'] : null;
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['ordered'] = isset($data['ordered']) ? $data['ordered'] : null;
        $this->container['search_request'] = isset($data['search_request']) ? $data['search_request'] : null;
        $this->container['instant_confirm'] = isset($data['instant_confirm']) ? $data['instant_confirm'] : null;
        $this->container['medical_insurance'] = isset($data['medical_insurance']) ? $data['medical_insurance'] : null;
        $this->container['misc_data'] = isset($data['misc_data']) ? $data['misc_data'] : null;
        $this->container['manual'] = isset($data['manual']) ? $data['manual'] : null;
        $this->container['previous_price'] = isset($data['previous_price']) ? $data['previous_price'] : null;
        $this->container['cheap_type'] = isset($data['cheap_type']) ? $data['cheap_type'] : null;
        $this->container['booking_url'] = isset($data['booking_url']) ? $data['booking_url'] : null;
        $this->container['actualization_url'] = isset($data['actualization_url']) ? $data['actualization_url'] : null;
        $this->container['room_info'] = isset($data['room_info']) ? $data['room_info'] : null;
        $this->container['extras'] = isset($data['extras']) ? $data['extras'] : null;
        $this->container['cancellation_policy'] = isset($data['cancellation_policy']) ? $data['cancellation_policy'] : null;
        $this->container['insurable'] = isset($data['insurable']) ? $data['insurable'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['notices'] = isset($data['notices']) ? $data['notices'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['confirmability_index'] = isset($data['confirmability_index']) ? $data['confirmability_index'] : null;
        $this->container['hotel'] = isset($data['hotel']) ? $data['hotel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCheapTypeAllowableValues();
        if (!is_null($this->container['cheap_type']) && !in_array($this->container['cheap_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cheap_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID пакета
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets tour_id
     *
     * @return string
     */
    public function getTourId()
    {
        return $this->container['tour_id'];
    }

    /**
     * Sets tour_id
     *
     * @param string $tour_id ID тура в системе
     *
     * @return $this
     */
    public function setTourId($tour_id)
    {
        $this->container['tour_id'] = $tour_id;

        return $this;
    }

    /**
     * Gets adults_count
     *
     * @return int
     */
    public function getAdultsCount()
    {
        return $this->container['adults_count'];
    }

    /**
     * Sets adults_count
     *
     * @param int $adults_count Количество взрослых туристов
     *
     * @return $this
     */
    public function setAdultsCount($adults_count)
    {
        $this->container['adults_count'] = $adults_count;

        return $this;
    }

    /**
     * Gets kids_count
     *
     * @return int
     */
    public function getKidsCount()
    {
        return $this->container['kids_count'];
    }

    /**
     * Sets kids_count
     *
     * @param int $kids_count Количество детей туристов
     *
     * @return $this
     */
    public function setKidsCount($kids_count)
    {
        $this->container['kids_count'] = $kids_count;

        return $this;
    }

    /**
     * Gets kids_ages
     *
     * @return int[]
     */
    public function getKidsAges()
    {
        return $this->container['kids_ages'];
    }

    /**
     * Sets kids_ages
     *
     * @param int[] $kids_ages Возраста детей туристов
     *
     * @return $this
     */
    public function setKidsAges($kids_ages)
    {
        $this->container['kids_ages'] = $kids_ages;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Дата вылета
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets arrival_date
     *
     * @return \DateTime
     */
    public function getArrivalDate()
    {
        return $this->container['arrival_date'];
    }

    /**
     * Sets arrival_date
     *
     * @param \DateTime $arrival_date Дата заезда
     *
     * @return $this
     */
    public function setArrivalDate($arrival_date)
    {
        $this->container['arrival_date'] = $arrival_date;

        return $this;
    }

    /**
     * Gets nights_count
     *
     * @return int
     */
    public function getNightsCount()
    {
        return $this->container['nights_count'];
    }

    /**
     * Sets nights_count
     *
     * @param int $nights_count Количество ночей
     *
     * @return $this
     */
    public function setNightsCount($nights_count)
    {
        $this->container['nights_count'] = $nights_count;

        return $this;
    }

    /**
     * Gets pansion
     *
     * @return \DateTime
     */
    public function getPansion()
    {
        return $this->container['pansion'];
    }

    /**
     * Sets pansion
     *
     * @param \DateTime $pansion Тип пансиона
     *
     * @return $this
     */
    public function setPansion($pansion)
    {
        $this->container['pansion'] = $pansion;

        return $this;
    }

    /**
     * Gets region_name
     *
     * @return string
     */
    public function getRegionName()
    {
        return $this->container['region_name'];
    }

    /**
     * Sets region_name
     *
     * @param string $region_name Называние региона
     *
     * @return $this
     */
    public function setRegionName($region_name)
    {
        $this->container['region_name'] = $region_name;

        return $this;
    }

    /**
     * Gets transfer
     *
     * @return bool
     */
    public function getTransfer()
    {
        return $this->container['transfer'];
    }

    /**
     * Sets transfer
     *
     * @param bool $transfer Трансфер до отеля
     *
     * @return $this
     */
    public function setTransfer($transfer)
    {
        $this->container['transfer'] = $transfer;

        return $this;
    }

    /**
     * Gets room_type
     *
     * @return string
     */
    public function getRoomType()
    {
        return $this->container['room_type'];
    }

    /**
     * Sets room_type
     *
     * @param string $room_type Тип номера
     *
     * @return $this
     */
    public function setRoomType($room_type)
    {
        $this->container['room_type'] = $room_type;

        return $this;
    }

    /**
     * Gets net_price
     *
     * @return float
     */
    public function getNetPrice()
    {
        return $this->container['net_price'];
    }

    /**
     * Sets net_price
     *
     * @param float $net_price Net price
     *
     * @return $this
     */
    public function setNetPrice($net_price)
    {
        $this->container['net_price'] = $net_price;

        return $this;
    }

    /**
     * Gets fuel_charge
     *
     * @return float
     */
    public function getFuelCharge()
    {
        return $this->container['fuel_charge'];
    }

    /**
     * Sets fuel_charge
     *
     * @param float $fuel_charge Топливный сбор
     *
     * @return $this
     */
    public function setFuelCharge($fuel_charge)
    {
        $this->container['fuel_charge'] = $fuel_charge;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Цена
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets dates_info
     *
     * @return \Swagger\Client\Model\InlineResponse20024DatesInfo
     */
    public function getDatesInfo()
    {
        return $this->container['dates_info'];
    }

    /**
     * Sets dates_info
     *
     * @param \Swagger\Client\Model\InlineResponse20024DatesInfo $dates_info dates_info
     *
     * @return $this
     */
    public function setDatesInfo($dates_info)
    {
        $this->container['dates_info'] = $dates_info;

        return $this;
    }

    /**
     * Gets pansion_description
     *
     * @return string
     */
    public function getPansionDescription()
    {
        return $this->container['pansion_description'];
    }

    /**
     * Sets pansion_description
     *
     * @param string $pansion_description Описание типа питания
     *
     * @return $this
     */
    public function setPansionDescription($pansion_description)
    {
        $this->container['pansion_description'] = $pansion_description;

        return $this;
    }

    /**
     * Gets pansion_original
     *
     * @return string
     */
    public function getPansionOriginal()
    {
        return $this->container['pansion_original'];
    }

    /**
     * Sets pansion_original
     *
     * @param string $pansion_original Идентификатор типа питания
     *
     * @return $this
     */
    public function setPansionOriginal($pansion_original)
    {
        $this->container['pansion_original'] = $pansion_original;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return \Swagger\Client\Model\InlineResponse20024Operator
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param \Swagger\Client\Model\InlineResponse20024Operator $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets departure
     *
     * @return \Swagger\Client\Model\InlineResponse20024Departure
     */
    public function getDeparture()
    {
        return $this->container['departure'];
    }

    /**
     * Sets departure
     *
     * @param \Swagger\Client\Model\InlineResponse20024Departure $departure departure
     *
     * @return $this
     */
    public function setDeparture($departure)
    {
        $this->container['departure'] = $departure;

        return $this;
    }

    /**
     * Gets available
     *
     * @return bool
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param bool $available Доступен ли пакет сейчас
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets ordered
     *
     * @return bool
     */
    public function getOrdered()
    {
        return $this->container['ordered'];
    }

    /**
     * Sets ordered
     *
     * @param bool $ordered Забронирован ли сейчас?
     *
     * @return $this
     */
    public function setOrdered($ordered)
    {
        $this->container['ordered'] = $ordered;

        return $this;
    }

    /**
     * Gets search_request
     *
     * @return string
     */
    public function getSearchRequest()
    {
        return $this->container['search_request'];
    }

    /**
     * Sets search_request
     *
     * @param string $search_request Запрос на поиск похожих туров
     *
     * @return $this
     */
    public function setSearchRequest($search_request)
    {
        $this->container['search_request'] = $search_request;

        return $this;
    }

    /**
     * Gets instant_confirm
     *
     * @return bool
     */
    public function getInstantConfirm()
    {
        return $this->container['instant_confirm'];
    }

    /**
     * Sets instant_confirm
     *
     * @param bool $instant_confirm Мгновенное подтверждение
     *
     * @return $this
     */
    public function setInstantConfirm($instant_confirm)
    {
        $this->container['instant_confirm'] = $instant_confirm;

        return $this;
    }

    /**
     * Gets medical_insurance
     *
     * @return bool
     */
    public function getMedicalInsurance()
    {
        return $this->container['medical_insurance'];
    }

    /**
     * Sets medical_insurance
     *
     * @param bool $medical_insurance Наличие медицинского страхования
     *
     * @return $this
     */
    public function setMedicalInsurance($medical_insurance)
    {
        $this->container['medical_insurance'] = $medical_insurance;

        return $this;
    }

    /**
     * Gets misc_data
     *
     * @return \Swagger\Client\Model\InlineResponse20026PackageMiscData
     */
    public function getMiscData()
    {
        return $this->container['misc_data'];
    }

    /**
     * Sets misc_data
     *
     * @param \Swagger\Client\Model\InlineResponse20026PackageMiscData $misc_data misc_data
     *
     * @return $this
     */
    public function setMiscData($misc_data)
    {
        $this->container['misc_data'] = $misc_data;

        return $this;
    }

    /**
     * Gets manual
     *
     * @return bool
     */
    public function getManual()
    {
        return $this->container['manual'];
    }

    /**
     * Sets manual
     *
     * @param bool $manual Ручной пакет?
     *
     * @return $this
     */
    public function setManual($manual)
    {
        $this->container['manual'] = $manual;

        return $this;
    }

    /**
     * Gets previous_price
     *
     * @return int
     */
    public function getPreviousPrice()
    {
        return $this->container['previous_price'];
    }

    /**
     * Sets previous_price
     *
     * @param int $previous_price Предыдушая цена пакета
     *
     * @return $this
     */
    public function setPreviousPrice($previous_price)
    {
        $this->container['previous_price'] = $previous_price;

        return $this;
    }

    /**
     * Gets cheap_type
     *
     * @return string
     */
    public function getCheapType()
    {
        return $this->container['cheap_type'];
    }

    /**
     * Sets cheap_type
     *
     * @param string $cheap_type Тип скидки
     *
     * @return $this
     */
    public function setCheapType($cheap_type)
    {
        $allowedValues = $this->getCheapTypeAllowableValues();
        if (!is_null($cheap_type) && !in_array($cheap_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cheap_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cheap_type'] = $cheap_type;

        return $this;
    }

    /**
     * Gets booking_url
     *
     * @return string
     */
    public function getBookingUrl()
    {
        return $this->container['booking_url'];
    }

    /**
     * Sets booking_url
     *
     * @param string $booking_url Абсолютная ссылка на бронирование
     *
     * @return $this
     */
    public function setBookingUrl($booking_url)
    {
        $this->container['booking_url'] = $booking_url;

        return $this;
    }

    /**
     * Gets actualization_url
     *
     * @return string
     */
    public function getActualizationUrl()
    {
        return $this->container['actualization_url'];
    }

    /**
     * Sets actualization_url
     *
     * @param string $actualization_url Ссылка для актуализации
     *
     * @return $this
     */
    public function setActualizationUrl($actualization_url)
    {
        $this->container['actualization_url'] = $actualization_url;

        return $this;
    }

    /**
     * Gets room_info
     *
     * @return \Swagger\Client\Model\InlineResponse20024RoomInfo
     */
    public function getRoomInfo()
    {
        return $this->container['room_info'];
    }

    /**
     * Sets room_info
     *
     * @param \Swagger\Client\Model\InlineResponse20024RoomInfo $room_info room_info
     *
     * @return $this
     */
    public function setRoomInfo($room_info)
    {
        $this->container['room_info'] = $room_info;

        return $this;
    }

    /**
     * Gets extras
     *
     * @return \Swagger\Client\Model\InlineResponse20026PackageExtras[]
     */
    public function getExtras()
    {
        return $this->container['extras'];
    }

    /**
     * Sets extras
     *
     * @param \Swagger\Client\Model\InlineResponse20026PackageExtras[] $extras Дополнительные услуги
     *
     * @return $this
     */
    public function setExtras($extras)
    {
        $this->container['extras'] = $extras;

        return $this;
    }

    /**
     * Gets cancellation_policy
     *
     * @return \Swagger\Client\Model\InlineResponse20026PackageCancellationPolicy
     */
    public function getCancellationPolicy()
    {
        return $this->container['cancellation_policy'];
    }

    /**
     * Sets cancellation_policy
     *
     * @param \Swagger\Client\Model\InlineResponse20026PackageCancellationPolicy $cancellation_policy cancellation_policy
     *
     * @return $this
     */
    public function setCancellationPolicy($cancellation_policy)
    {
        $this->container['cancellation_policy'] = $cancellation_policy;

        return $this;
    }

    /**
     * Gets insurable
     *
     * @return bool
     */
    public function getInsurable()
    {
        return $this->container['insurable'];
    }

    /**
     * Sets insurable
     *
     * @param bool $insurable Можно ли добавить страховку?
     *
     * @return $this
     */
    public function setInsurable($insurable)
    {
        $this->container['insurable'] = $insurable;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string $link Абсолютная ссылка на пакет
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets notices
     *
     * @return string[]
     */
    public function getNotices()
    {
        return $this->container['notices'];
    }

    /**
     * Sets notices
     *
     * @param string[] $notices Уведомления от турсентри
     *
     * @return $this
     */
    public function setNotices($notices)
    {
        $this->container['notices'] = $notices;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Swagger\Client\Model\InlineResponse20024Labels[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Swagger\Client\Model\InlineResponse20024Labels[] $labels Labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \Swagger\Client\Model\InlineResponse20024Availability
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \Swagger\Client\Model\InlineResponse20024Availability $availability availability
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets confirmability_index
     *
     * @return float
     */
    public function getConfirmabilityIndex()
    {
        return $this->container['confirmability_index'];
    }

    /**
     * Sets confirmability_index
     *
     * @param float $confirmability_index Индекс подтверждаемости
     *
     * @return $this
     */
    public function setConfirmabilityIndex($confirmability_index)
    {
        $this->container['confirmability_index'] = $confirmability_index;

        return $this;
    }

    /**
     * Gets hotel
     *
     * @return \Swagger\Client\Model\InlineResponse20026PackageHotel
     */
    public function getHotel()
    {
        return $this->container['hotel'];
    }

    /**
     * Sets hotel
     *
     * @param \Swagger\Client\Model\InlineResponse20026PackageHotel $hotel hotel
     *
     * @return $this
     */
    public function setHotel($hotel)
    {
        $this->container['hotel'] = $hotel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
