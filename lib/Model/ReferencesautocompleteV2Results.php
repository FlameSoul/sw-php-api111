<?php
/**
 * ReferencesautocompleteV2Results
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReferencesautocompleteV2Results Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReferencesautocompleteV2Results implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'referencesautocomplete_v2_results';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'name_en' => 'string',
        'name_ru_form3' => 'string',
        'budget' => 'int',
        'visa_type' => 'string',
        'image' => 'string',
        'iso2' => 'string',
        'country_name_ru' => 'string',
        'country_name_en' => 'string',
        'country_id' => 'int',
        'active_regions' => 'string',
        'description' => 'string',
        'icon' => 'string',
        'city_name' => 'string',
        'public_url' => 'string',
        'stars' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'name_en' => null,
        'name_ru_form3' => null,
        'budget' => null,
        'visa_type' => null,
        'image' => null,
        'iso2' => null,
        'country_name_ru' => null,
        'country_name_en' => null,
        'country_id' => null,
        'active_regions' => null,
        'description' => null,
        'icon' => null,
        'city_name' => null,
        'public_url' => null,
        'stars' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'name_en' => 'name_en',
        'name_ru_form3' => 'name_ru_form3',
        'budget' => 'budget',
        'visa_type' => 'visa_type',
        'image' => 'image',
        'iso2' => 'iso2',
        'country_name_ru' => 'country_name_ru',
        'country_name_en' => 'country_name_en',
        'country_id' => 'country_id',
        'active_regions' => 'active_regions',
        'description' => 'description',
        'icon' => 'icon',
        'city_name' => 'city_name',
        'public_url' => 'public_url',
        'stars' => 'stars'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'name_en' => 'setNameEn',
        'name_ru_form3' => 'setNameRuForm3',
        'budget' => 'setBudget',
        'visa_type' => 'setVisaType',
        'image' => 'setImage',
        'iso2' => 'setIso2',
        'country_name_ru' => 'setCountryNameRu',
        'country_name_en' => 'setCountryNameEn',
        'country_id' => 'setCountryId',
        'active_regions' => 'setActiveRegions',
        'description' => 'setDescription',
        'icon' => 'setIcon',
        'city_name' => 'setCityName',
        'public_url' => 'setPublicUrl',
        'stars' => 'setStars'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'name_en' => 'getNameEn',
        'name_ru_form3' => 'getNameRuForm3',
        'budget' => 'getBudget',
        'visa_type' => 'getVisaType',
        'image' => 'getImage',
        'iso2' => 'getIso2',
        'country_name_ru' => 'getCountryNameRu',
        'country_name_en' => 'getCountryNameEn',
        'country_id' => 'getCountryId',
        'active_regions' => 'getActiveRegions',
        'description' => 'getDescription',
        'icon' => 'getIcon',
        'city_name' => 'getCityName',
        'public_url' => 'getPublicUrl',
        'stars' => 'getStars'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_en'] = isset($data['name_en']) ? $data['name_en'] : null;
        $this->container['name_ru_form3'] = isset($data['name_ru_form3']) ? $data['name_ru_form3'] : null;
        $this->container['budget'] = isset($data['budget']) ? $data['budget'] : null;
        $this->container['visa_type'] = isset($data['visa_type']) ? $data['visa_type'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['iso2'] = isset($data['iso2']) ? $data['iso2'] : null;
        $this->container['country_name_ru'] = isset($data['country_name_ru']) ? $data['country_name_ru'] : null;
        $this->container['country_name_en'] = isset($data['country_name_en']) ? $data['country_name_en'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['active_regions'] = isset($data['active_regions']) ? $data['active_regions'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['city_name'] = isset($data['city_name']) ? $data['city_name'] : null;
        $this->container['public_url'] = isset($data['public_url']) ? $data['public_url'] : null;
        $this->container['stars'] = isset($data['stars']) ? $data['stars'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID Плейса в системе
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Название Плейса на русском
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_en
     *
     * @return string
     */
    public function getNameEn()
    {
        return $this->container['name_en'];
    }

    /**
     * Sets name_en
     *
     * @param string $name_en Название Плейса на английском
     *
     * @return $this
     */
    public function setNameEn($name_en)
    {
        $this->container['name_en'] = $name_en;

        return $this;
    }

    /**
     * Gets name_ru_form3
     *
     * @return string
     */
    public function getNameRuForm3()
    {
        return $this->container['name_ru_form3'];
    }

    /**
     * Sets name_ru_form3
     *
     * @param string $name_ru_form3 Название Плейса в винительном падеже
     *
     * @return $this
     */
    public function setNameRuForm3($name_ru_form3)
    {
        $this->container['name_ru_form3'] = $name_ru_form3;

        return $this;
    }

    /**
     * Gets budget
     *
     * @return int
     */
    public function getBudget()
    {
        return $this->container['budget'];
    }

    /**
     * Sets budget
     *
     * @param int $budget Относительная стоимость туров (только для Плейсов группы countries)
     *
     * @return $this
     */
    public function setBudget($budget)
    {
        $this->container['budget'] = $budget;

        return $this;
    }

    /**
     * Gets visa_type
     *
     * @return string
     */
    public function getVisaType()
    {
        return $this->container['visa_type'];
    }

    /**
     * Sets visa_type
     *
     * @param string $visa_type Тип визы (только для Плейсов группы countries)
     *
     * @return $this
     */
    public function setVisaType($visa_type)
    {
        $this->container['visa_type'] = $visa_type;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image Абсолютная ссылка на изображение (только для Плейсов группы countries)
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets iso2
     *
     * @return string
     */
    public function getIso2()
    {
        return $this->container['iso2'];
    }

    /**
     * Sets iso2
     *
     * @param string $iso2 ISO2 страны
     *
     * @return $this
     */
    public function setIso2($iso2)
    {
        $this->container['iso2'] = $iso2;

        return $this;
    }

    /**
     * Gets country_name_ru
     *
     * @return string
     */
    public function getCountryNameRu()
    {
        return $this->container['country_name_ru'];
    }

    /**
     * Sets country_name_ru
     *
     * @param string $country_name_ru Название страны на русском (кроме Плейсов группы countries)
     *
     * @return $this
     */
    public function setCountryNameRu($country_name_ru)
    {
        $this->container['country_name_ru'] = $country_name_ru;

        return $this;
    }

    /**
     * Gets country_name_en
     *
     * @return string
     */
    public function getCountryNameEn()
    {
        return $this->container['country_name_en'];
    }

    /**
     * Sets country_name_en
     *
     * @param string $country_name_en Название страны на английском (только для Плейсов групп regions и metaregions)
     *
     * @return $this
     */
    public function setCountryNameEn($country_name_en)
    {
        $this->container['country_name_en'] = $country_name_en;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id Идентификатор страны (только для Плейсов групп regions и hotels)
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets active_regions
     *
     * @return string
     */
    public function getActiveRegions()
    {
        return $this->container['active_regions'];
    }

    /**
     * Sets active_regions
     *
     * @param string $active_regions Список вложенных регионов (только для Плейсов групп regions)
     *
     * @return $this
     */
    public function setActiveRegions($active_regions)
    {
        $this->container['active_regions'] = $active_regions;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Описание метарегиона (только для Плейсов группы metaregions)
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon Ссылка на изображение метарегиона (только для Плейсов группы metaregions)
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets city_name
     *
     * @return string
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     *
     * @param string $city_name Название города на русском (только для Плейсов группы hotels)
     *
     * @return $this
     */
    public function setCityName($city_name)
    {
        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets public_url
     *
     * @return string
     */
    public function getPublicUrl()
    {
        return $this->container['public_url'];
    }

    /**
     * Sets public_url
     *
     * @param string $public_url Относительная ссылка на отель (только для Плейсов группы hotels)
     *
     * @return $this
     */
    public function setPublicUrl($public_url)
    {
        $this->container['public_url'] = $public_url;

        return $this;
    }

    /**
     * Gets stars
     *
     * @return int
     */
    public function getStars()
    {
        return $this->container['stars'];
    }

    /**
     * Sets stars
     *
     * @param int $stars Звездность отеля (только для Плейсов группы hotels)
     *
     * @return $this
     */
    public function setStars($stars)
    {
        $this->container['stars'] = $stars;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
