<?php
/**
 * InlineResponse20018
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20018 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20018 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_18';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'latest_orders' => '\Swagger\Client\Model\InlineResponse20018LatestOrders[]',
        'hot_prices_by_country' => '\Swagger\Client\Model\InlineResponse20018HotPricesByCountry[]',
        'hot_tours' => '\Swagger\Client\Model\InlineResponse20018HotTours[]',
        'found_tours_today' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'latest_orders' => null,
        'hot_prices_by_country' => null,
        'hot_tours' => null,
        'found_tours_today' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'latest_orders' => 'latest_orders',
        'hot_prices_by_country' => 'hot_prices_by_country',
        'hot_tours' => 'hot_tours',
        'found_tours_today' => 'found_tours_today'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'latest_orders' => 'setLatestOrders',
        'hot_prices_by_country' => 'setHotPricesByCountry',
        'hot_tours' => 'setHotTours',
        'found_tours_today' => 'setFoundToursToday'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'latest_orders' => 'getLatestOrders',
        'hot_prices_by_country' => 'getHotPricesByCountry',
        'hot_tours' => 'getHotTours',
        'found_tours_today' => 'getFoundToursToday'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['latest_orders'] = isset($data['latest_orders']) ? $data['latest_orders'] : null;
        $this->container['hot_prices_by_country'] = isset($data['hot_prices_by_country']) ? $data['hot_prices_by_country'] : null;
        $this->container['hot_tours'] = isset($data['hot_tours']) ? $data['hot_tours'] : null;
        $this->container['found_tours_today'] = isset($data['found_tours_today']) ? $data['found_tours_today'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets latest_orders
     *
     * @return \Swagger\Client\Model\InlineResponse20018LatestOrders[]
     */
    public function getLatestOrders()
    {
        return $this->container['latest_orders'];
    }

    /**
     * Sets latest_orders
     *
     * @param \Swagger\Client\Model\InlineResponse20018LatestOrders[] $latest_orders latest_orders
     *
     * @return $this
     */
    public function setLatestOrders($latest_orders)
    {
        $this->container['latest_orders'] = $latest_orders;

        return $this;
    }

    /**
     * Gets hot_prices_by_country
     *
     * @return \Swagger\Client\Model\InlineResponse20018HotPricesByCountry[]
     */
    public function getHotPricesByCountry()
    {
        return $this->container['hot_prices_by_country'];
    }

    /**
     * Sets hot_prices_by_country
     *
     * @param \Swagger\Client\Model\InlineResponse20018HotPricesByCountry[] $hot_prices_by_country hot_prices_by_country
     *
     * @return $this
     */
    public function setHotPricesByCountry($hot_prices_by_country)
    {
        $this->container['hot_prices_by_country'] = $hot_prices_by_country;

        return $this;
    }

    /**
     * Gets hot_tours
     *
     * @return \Swagger\Client\Model\InlineResponse20018HotTours[]
     */
    public function getHotTours()
    {
        return $this->container['hot_tours'];
    }

    /**
     * Sets hot_tours
     *
     * @param \Swagger\Client\Model\InlineResponse20018HotTours[] $hot_tours hot_tours
     *
     * @return $this
     */
    public function setHotTours($hot_tours)
    {
        $this->container['hot_tours'] = $hot_tours;

        return $this;
    }

    /**
     * Gets found_tours_today
     *
     * @return int
     */
    public function getFoundToursToday()
    {
        return $this->container['found_tours_today'];
    }

    /**
     * Sets found_tours_today
     *
     * @param int $found_tours_today Количество поисков за сегодня
     *
     * @return $this
     */
    public function setFoundToursToday($found_tours_today)
    {
        $this->container['found_tours_today'] = $found_tours_today;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
