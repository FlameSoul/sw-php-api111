<?php
/**
 * InlineResponse2002Hotel1Features
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2002Hotel1Features Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002Hotel1Features implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_hotel_1_features';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'construction_year' => 'string',
        'renovation_year' => 'string',
        'airport_distance' => 'float',
        'beach_distance' => 'float',
        'beach_size' => 'float',
        'beach_type' => 'string',
        'beach_surface' => 'string',
        'area' => 'string',
        'line' => 'float',
        'wi_fi' => 'string',
        'ski_lift_distance' => 'string',
        'ski_in' => 'bool',
        'ski_out' => 'bool',
        'fitness' => 'bool',
        'aquapark' => 'bool',
        'nanny' => 'bool',
        'kids_menu' => 'bool',
        'kids_club' => 'bool',
        'kids_pool' => 'bool',
        'pool' => 'bool',
        'heated_pool' => 'bool',
        'aircon' => 'bool',
        'parking' => 'bool',
        'massage' => 'bool',
        'thermal_fun' => 'bool',
        'bar' => 'bool',
        'indoor_pool' => 'bool',
        'no_single_men' => 'bool',
        'min_age' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'construction_year' => 'nullable',
        'renovation_year' => 'nullable',
        'airport_distance' => null,
        'beach_distance' => null,
        'beach_size' => null,
        'beach_type' => null,
        'beach_surface' => null,
        'area' => 'nullable',
        'line' => null,
        'wi_fi' => null,
        'ski_lift_distance' => 'nullable',
        'ski_in' => null,
        'ski_out' => null,
        'fitness' => null,
        'aquapark' => null,
        'nanny' => null,
        'kids_menu' => null,
        'kids_club' => null,
        'kids_pool' => null,
        'pool' => null,
        'heated_pool' => null,
        'aircon' => null,
        'parking' => null,
        'massage' => null,
        'thermal_fun' => null,
        'bar' => null,
        'indoor_pool' => null,
        'no_single_men' => null,
        'min_age' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'construction_year' => 'construction_year',
        'renovation_year' => 'renovation_year',
        'airport_distance' => 'airport_distance',
        'beach_distance' => 'beach_distance',
        'beach_size' => 'beach_size',
        'beach_type' => 'beach_type',
        'beach_surface' => 'beach_surface',
        'area' => 'area',
        'line' => 'line',
        'wi_fi' => 'wi_fi',
        'ski_lift_distance' => 'ski_lift_distance',
        'ski_in' => 'ski_in',
        'ski_out' => 'ski_out',
        'fitness' => 'fitness',
        'aquapark' => 'aquapark',
        'nanny' => 'nanny',
        'kids_menu' => 'kids_menu',
        'kids_club' => 'kids_club',
        'kids_pool' => 'kids_pool',
        'pool' => 'pool',
        'heated_pool' => 'heated_pool',
        'aircon' => 'aircon',
        'parking' => 'parking',
        'massage' => 'massage',
        'thermal_fun' => 'thermal_fun',
        'bar' => 'bar',
        'indoor_pool' => 'indoor_pool',
        'no_single_men' => 'no_single_men',
        'min_age' => 'min_age'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'construction_year' => 'setConstructionYear',
        'renovation_year' => 'setRenovationYear',
        'airport_distance' => 'setAirportDistance',
        'beach_distance' => 'setBeachDistance',
        'beach_size' => 'setBeachSize',
        'beach_type' => 'setBeachType',
        'beach_surface' => 'setBeachSurface',
        'area' => 'setArea',
        'line' => 'setLine',
        'wi_fi' => 'setWiFi',
        'ski_lift_distance' => 'setSkiLiftDistance',
        'ski_in' => 'setSkiIn',
        'ski_out' => 'setSkiOut',
        'fitness' => 'setFitness',
        'aquapark' => 'setAquapark',
        'nanny' => 'setNanny',
        'kids_menu' => 'setKidsMenu',
        'kids_club' => 'setKidsClub',
        'kids_pool' => 'setKidsPool',
        'pool' => 'setPool',
        'heated_pool' => 'setHeatedPool',
        'aircon' => 'setAircon',
        'parking' => 'setParking',
        'massage' => 'setMassage',
        'thermal_fun' => 'setThermalFun',
        'bar' => 'setBar',
        'indoor_pool' => 'setIndoorPool',
        'no_single_men' => 'setNoSingleMen',
        'min_age' => 'setMinAge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'construction_year' => 'getConstructionYear',
        'renovation_year' => 'getRenovationYear',
        'airport_distance' => 'getAirportDistance',
        'beach_distance' => 'getBeachDistance',
        'beach_size' => 'getBeachSize',
        'beach_type' => 'getBeachType',
        'beach_surface' => 'getBeachSurface',
        'area' => 'getArea',
        'line' => 'getLine',
        'wi_fi' => 'getWiFi',
        'ski_lift_distance' => 'getSkiLiftDistance',
        'ski_in' => 'getSkiIn',
        'ski_out' => 'getSkiOut',
        'fitness' => 'getFitness',
        'aquapark' => 'getAquapark',
        'nanny' => 'getNanny',
        'kids_menu' => 'getKidsMenu',
        'kids_club' => 'getKidsClub',
        'kids_pool' => 'getKidsPool',
        'pool' => 'getPool',
        'heated_pool' => 'getHeatedPool',
        'aircon' => 'getAircon',
        'parking' => 'getParking',
        'massage' => 'getMassage',
        'thermal_fun' => 'getThermalFun',
        'bar' => 'getBar',
        'indoor_pool' => 'getIndoorPool',
        'no_single_men' => 'getNoSingleMen',
        'min_age' => 'getMinAge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['construction_year'] = isset($data['construction_year']) ? $data['construction_year'] : null;
        $this->container['renovation_year'] = isset($data['renovation_year']) ? $data['renovation_year'] : null;
        $this->container['airport_distance'] = isset($data['airport_distance']) ? $data['airport_distance'] : null;
        $this->container['beach_distance'] = isset($data['beach_distance']) ? $data['beach_distance'] : null;
        $this->container['beach_size'] = isset($data['beach_size']) ? $data['beach_size'] : null;
        $this->container['beach_type'] = isset($data['beach_type']) ? $data['beach_type'] : null;
        $this->container['beach_surface'] = isset($data['beach_surface']) ? $data['beach_surface'] : null;
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['line'] = isset($data['line']) ? $data['line'] : null;
        $this->container['wi_fi'] = isset($data['wi_fi']) ? $data['wi_fi'] : null;
        $this->container['ski_lift_distance'] = isset($data['ski_lift_distance']) ? $data['ski_lift_distance'] : null;
        $this->container['ski_in'] = isset($data['ski_in']) ? $data['ski_in'] : null;
        $this->container['ski_out'] = isset($data['ski_out']) ? $data['ski_out'] : null;
        $this->container['fitness'] = isset($data['fitness']) ? $data['fitness'] : null;
        $this->container['aquapark'] = isset($data['aquapark']) ? $data['aquapark'] : null;
        $this->container['nanny'] = isset($data['nanny']) ? $data['nanny'] : null;
        $this->container['kids_menu'] = isset($data['kids_menu']) ? $data['kids_menu'] : null;
        $this->container['kids_club'] = isset($data['kids_club']) ? $data['kids_club'] : null;
        $this->container['kids_pool'] = isset($data['kids_pool']) ? $data['kids_pool'] : null;
        $this->container['pool'] = isset($data['pool']) ? $data['pool'] : null;
        $this->container['heated_pool'] = isset($data['heated_pool']) ? $data['heated_pool'] : null;
        $this->container['aircon'] = isset($data['aircon']) ? $data['aircon'] : null;
        $this->container['parking'] = isset($data['parking']) ? $data['parking'] : null;
        $this->container['massage'] = isset($data['massage']) ? $data['massage'] : null;
        $this->container['thermal_fun'] = isset($data['thermal_fun']) ? $data['thermal_fun'] : null;
        $this->container['bar'] = isset($data['bar']) ? $data['bar'] : null;
        $this->container['indoor_pool'] = isset($data['indoor_pool']) ? $data['indoor_pool'] : null;
        $this->container['no_single_men'] = isset($data['no_single_men']) ? $data['no_single_men'] : null;
        $this->container['min_age'] = isset($data['min_age']) ? $data['min_age'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets construction_year
     *
     * @return string
     */
    public function getConstructionYear()
    {
        return $this->container['construction_year'];
    }

    /**
     * Sets construction_year
     *
     * @param string $construction_year construction_year
     *
     * @return $this
     */
    public function setConstructionYear($construction_year)
    {
        $this->container['construction_year'] = $construction_year;

        return $this;
    }

    /**
     * Gets renovation_year
     *
     * @return string
     */
    public function getRenovationYear()
    {
        return $this->container['renovation_year'];
    }

    /**
     * Sets renovation_year
     *
     * @param string $renovation_year renovation_year
     *
     * @return $this
     */
    public function setRenovationYear($renovation_year)
    {
        $this->container['renovation_year'] = $renovation_year;

        return $this;
    }

    /**
     * Gets airport_distance
     *
     * @return float
     */
    public function getAirportDistance()
    {
        return $this->container['airport_distance'];
    }

    /**
     * Sets airport_distance
     *
     * @param float $airport_distance airport_distance
     *
     * @return $this
     */
    public function setAirportDistance($airport_distance)
    {
        $this->container['airport_distance'] = $airport_distance;

        return $this;
    }

    /**
     * Gets beach_distance
     *
     * @return float
     */
    public function getBeachDistance()
    {
        return $this->container['beach_distance'];
    }

    /**
     * Sets beach_distance
     *
     * @param float $beach_distance beach_distance
     *
     * @return $this
     */
    public function setBeachDistance($beach_distance)
    {
        $this->container['beach_distance'] = $beach_distance;

        return $this;
    }

    /**
     * Gets beach_size
     *
     * @return float
     */
    public function getBeachSize()
    {
        return $this->container['beach_size'];
    }

    /**
     * Sets beach_size
     *
     * @param float $beach_size beach_size
     *
     * @return $this
     */
    public function setBeachSize($beach_size)
    {
        $this->container['beach_size'] = $beach_size;

        return $this;
    }

    /**
     * Gets beach_type
     *
     * @return string
     */
    public function getBeachType()
    {
        return $this->container['beach_type'];
    }

    /**
     * Sets beach_type
     *
     * @param string $beach_type beach_type
     *
     * @return $this
     */
    public function setBeachType($beach_type)
    {
        $this->container['beach_type'] = $beach_type;

        return $this;
    }

    /**
     * Gets beach_surface
     *
     * @return string
     */
    public function getBeachSurface()
    {
        return $this->container['beach_surface'];
    }

    /**
     * Sets beach_surface
     *
     * @param string $beach_surface beach_surface
     *
     * @return $this
     */
    public function setBeachSurface($beach_surface)
    {
        $this->container['beach_surface'] = $beach_surface;

        return $this;
    }

    /**
     * Gets area
     *
     * @return string
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param string $area area
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets line
     *
     * @return float
     */
    public function getLine()
    {
        return $this->container['line'];
    }

    /**
     * Sets line
     *
     * @param float $line line
     *
     * @return $this
     */
    public function setLine($line)
    {
        $this->container['line'] = $line;

        return $this;
    }

    /**
     * Gets wi_fi
     *
     * @return string
     */
    public function getWiFi()
    {
        return $this->container['wi_fi'];
    }

    /**
     * Sets wi_fi
     *
     * @param string $wi_fi wi_fi
     *
     * @return $this
     */
    public function setWiFi($wi_fi)
    {
        $this->container['wi_fi'] = $wi_fi;

        return $this;
    }

    /**
     * Gets ski_lift_distance
     *
     * @return string
     */
    public function getSkiLiftDistance()
    {
        return $this->container['ski_lift_distance'];
    }

    /**
     * Sets ski_lift_distance
     *
     * @param string $ski_lift_distance ski_lift_distance
     *
     * @return $this
     */
    public function setSkiLiftDistance($ski_lift_distance)
    {
        $this->container['ski_lift_distance'] = $ski_lift_distance;

        return $this;
    }

    /**
     * Gets ski_in
     *
     * @return bool
     */
    public function getSkiIn()
    {
        return $this->container['ski_in'];
    }

    /**
     * Sets ski_in
     *
     * @param bool $ski_in ski_in
     *
     * @return $this
     */
    public function setSkiIn($ski_in)
    {
        $this->container['ski_in'] = $ski_in;

        return $this;
    }

    /**
     * Gets ski_out
     *
     * @return bool
     */
    public function getSkiOut()
    {
        return $this->container['ski_out'];
    }

    /**
     * Sets ski_out
     *
     * @param bool $ski_out ski_out
     *
     * @return $this
     */
    public function setSkiOut($ski_out)
    {
        $this->container['ski_out'] = $ski_out;

        return $this;
    }

    /**
     * Gets fitness
     *
     * @return bool
     */
    public function getFitness()
    {
        return $this->container['fitness'];
    }

    /**
     * Sets fitness
     *
     * @param bool $fitness fitness
     *
     * @return $this
     */
    public function setFitness($fitness)
    {
        $this->container['fitness'] = $fitness;

        return $this;
    }

    /**
     * Gets aquapark
     *
     * @return bool
     */
    public function getAquapark()
    {
        return $this->container['aquapark'];
    }

    /**
     * Sets aquapark
     *
     * @param bool $aquapark aquapark
     *
     * @return $this
     */
    public function setAquapark($aquapark)
    {
        $this->container['aquapark'] = $aquapark;

        return $this;
    }

    /**
     * Gets nanny
     *
     * @return bool
     */
    public function getNanny()
    {
        return $this->container['nanny'];
    }

    /**
     * Sets nanny
     *
     * @param bool $nanny nanny
     *
     * @return $this
     */
    public function setNanny($nanny)
    {
        $this->container['nanny'] = $nanny;

        return $this;
    }

    /**
     * Gets kids_menu
     *
     * @return bool
     */
    public function getKidsMenu()
    {
        return $this->container['kids_menu'];
    }

    /**
     * Sets kids_menu
     *
     * @param bool $kids_menu kids_menu
     *
     * @return $this
     */
    public function setKidsMenu($kids_menu)
    {
        $this->container['kids_menu'] = $kids_menu;

        return $this;
    }

    /**
     * Gets kids_club
     *
     * @return bool
     */
    public function getKidsClub()
    {
        return $this->container['kids_club'];
    }

    /**
     * Sets kids_club
     *
     * @param bool $kids_club kids_club
     *
     * @return $this
     */
    public function setKidsClub($kids_club)
    {
        $this->container['kids_club'] = $kids_club;

        return $this;
    }

    /**
     * Gets kids_pool
     *
     * @return bool
     */
    public function getKidsPool()
    {
        return $this->container['kids_pool'];
    }

    /**
     * Sets kids_pool
     *
     * @param bool $kids_pool kids_pool
     *
     * @return $this
     */
    public function setKidsPool($kids_pool)
    {
        $this->container['kids_pool'] = $kids_pool;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return bool
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param bool $pool pool
     *
     * @return $this
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets heated_pool
     *
     * @return bool
     */
    public function getHeatedPool()
    {
        return $this->container['heated_pool'];
    }

    /**
     * Sets heated_pool
     *
     * @param bool $heated_pool heated_pool
     *
     * @return $this
     */
    public function setHeatedPool($heated_pool)
    {
        $this->container['heated_pool'] = $heated_pool;

        return $this;
    }

    /**
     * Gets aircon
     *
     * @return bool
     */
    public function getAircon()
    {
        return $this->container['aircon'];
    }

    /**
     * Sets aircon
     *
     * @param bool $aircon aircon
     *
     * @return $this
     */
    public function setAircon($aircon)
    {
        $this->container['aircon'] = $aircon;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return bool
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param bool $parking parking
     *
     * @return $this
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets massage
     *
     * @return bool
     */
    public function getMassage()
    {
        return $this->container['massage'];
    }

    /**
     * Sets massage
     *
     * @param bool $massage massage
     *
     * @return $this
     */
    public function setMassage($massage)
    {
        $this->container['massage'] = $massage;

        return $this;
    }

    /**
     * Gets thermal_fun
     *
     * @return bool
     */
    public function getThermalFun()
    {
        return $this->container['thermal_fun'];
    }

    /**
     * Sets thermal_fun
     *
     * @param bool $thermal_fun thermal_fun
     *
     * @return $this
     */
    public function setThermalFun($thermal_fun)
    {
        $this->container['thermal_fun'] = $thermal_fun;

        return $this;
    }

    /**
     * Gets bar
     *
     * @return bool
     */
    public function getBar()
    {
        return $this->container['bar'];
    }

    /**
     * Sets bar
     *
     * @param bool $bar bar
     *
     * @return $this
     */
    public function setBar($bar)
    {
        $this->container['bar'] = $bar;

        return $this;
    }

    /**
     * Gets indoor_pool
     *
     * @return bool
     */
    public function getIndoorPool()
    {
        return $this->container['indoor_pool'];
    }

    /**
     * Sets indoor_pool
     *
     * @param bool $indoor_pool indoor_pool
     *
     * @return $this
     */
    public function setIndoorPool($indoor_pool)
    {
        $this->container['indoor_pool'] = $indoor_pool;

        return $this;
    }

    /**
     * Gets no_single_men
     *
     * @return bool
     */
    public function getNoSingleMen()
    {
        return $this->container['no_single_men'];
    }

    /**
     * Sets no_single_men
     *
     * @param bool $no_single_men no_single_men
     *
     * @return $this
     */
    public function setNoSingleMen($no_single_men)
    {
        $this->container['no_single_men'] = $no_single_men;

        return $this;
    }

    /**
     * Gets min_age
     *
     * @return float
     */
    public function getMinAge()
    {
        return $this->container['min_age'];
    }

    /**
     * Sets min_age
     *
     * @param float $min_age min_age
     *
     * @return $this
     */
    public function setMinAge($min_age)
    {
        $this->container['min_age'] = $min_age;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
