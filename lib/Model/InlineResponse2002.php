<?php
/**
 * InlineResponse2002
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2002 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'success' => 'bool',
        'search_type' => 'string',
        'status' => '\Swagger\Client\Model\InlineResponse2002Status',
        'hotels' => '\Swagger\Client\Model\InlineResponse2002Hotels[]',
        'filtered_results' => '\Swagger\Client\Model\InlineResponse2002FilteredResults[]',
        'filters' => '\Swagger\Client\Model\InlineResponse2002Filters',
        'filtered_hotels' => 'float[]',
        'enriched' => 'bool',
        'sort_by' => 'string',
        'statistics' => '\Swagger\Client\Model\InlineResponse2002Statistics',
        'go_ext_version' => 'string',
        'hotels_count' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'success' => null,
        'search_type' => null,
        'status' => null,
        'hotels' => null,
        'filtered_results' => null,
        'filters' => null,
        'filtered_hotels' => null,
        'enriched' => null,
        'sort_by' => null,
        'statistics' => null,
        'go_ext_version' => null,
        'hotels_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'search_type' => 'search_type',
        'status' => 'status',
        'hotels' => 'hotels',
        'filtered_results' => 'filtered_results',
        'filters' => 'filters',
        'filtered_hotels' => 'filtered_hotels',
        'enriched' => 'enriched',
        'sort_by' => 'sort_by',
        'statistics' => 'statistics',
        'go_ext_version' => 'go_ext_version',
        'hotels_count' => 'hotels_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'search_type' => 'setSearchType',
        'status' => 'setStatus',
        'hotels' => 'setHotels',
        'filtered_results' => 'setFilteredResults',
        'filters' => 'setFilters',
        'filtered_hotels' => 'setFilteredHotels',
        'enriched' => 'setEnriched',
        'sort_by' => 'setSortBy',
        'statistics' => 'setStatistics',
        'go_ext_version' => 'setGoExtVersion',
        'hotels_count' => 'setHotelsCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'search_type' => 'getSearchType',
        'status' => 'getStatus',
        'hotels' => 'getHotels',
        'filtered_results' => 'getFilteredResults',
        'filters' => 'getFilters',
        'filtered_hotels' => 'getFilteredHotels',
        'enriched' => 'getEnriched',
        'sort_by' => 'getSortBy',
        'statistics' => 'getStatistics',
        'go_ext_version' => 'getGoExtVersion',
        'hotels_count' => 'getHotelsCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SEARCH_TYPE__0_1 = '0 1';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSearchTypeAllowableValues()
    {
        return [
            self::SEARCH_TYPE__0_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['search_type'] = isset($data['search_type']) ? $data['search_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['hotels'] = isset($data['hotels']) ? $data['hotels'] : null;
        $this->container['filtered_results'] = isset($data['filtered_results']) ? $data['filtered_results'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['filtered_hotels'] = isset($data['filtered_hotels']) ? $data['filtered_hotels'] : null;
        $this->container['enriched'] = isset($data['enriched']) ? $data['enriched'] : null;
        $this->container['sort_by'] = isset($data['sort_by']) ? $data['sort_by'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
        $this->container['go_ext_version'] = isset($data['go_ext_version']) ? $data['go_ext_version'] : null;
        $this->container['hotels_count'] = isset($data['hotels_count']) ? $data['hotels_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSearchTypeAllowableValues();
        if (!is_null($this->container['search_type']) && !in_array($this->container['search_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'search_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success success
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets search_type
     *
     * @return string
     */
    public function getSearchType()
    {
        return $this->container['search_type'];
    }

    /**
     * Sets search_type
     *
     * @param string $search_type search_type
     *
     * @return $this
     */
    public function setSearchType($search_type)
    {
        $allowedValues = $this->getSearchTypeAllowableValues();
        if (!is_null($search_type) && !in_array($search_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'search_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['search_type'] = $search_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\InlineResponse2002Status
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\InlineResponse2002Status $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets hotels
     *
     * @return \Swagger\Client\Model\InlineResponse2002Hotels[]
     */
    public function getHotels()
    {
        return $this->container['hotels'];
    }

    /**
     * Sets hotels
     *
     * @param \Swagger\Client\Model\InlineResponse2002Hotels[] $hotels hotels
     *
     * @return $this
     */
    public function setHotels($hotels)
    {
        $this->container['hotels'] = $hotels;

        return $this;
    }

    /**
     * Gets filtered_results
     *
     * @return \Swagger\Client\Model\InlineResponse2002FilteredResults[]
     */
    public function getFilteredResults()
    {
        return $this->container['filtered_results'];
    }

    /**
     * Sets filtered_results
     *
     * @param \Swagger\Client\Model\InlineResponse2002FilteredResults[] $filtered_results filtered_results
     *
     * @return $this
     */
    public function setFilteredResults($filtered_results)
    {
        $this->container['filtered_results'] = $filtered_results;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Swagger\Client\Model\InlineResponse2002Filters
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Swagger\Client\Model\InlineResponse2002Filters $filters filters
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets filtered_hotels
     *
     * @return float[]
     */
    public function getFilteredHotels()
    {
        return $this->container['filtered_hotels'];
    }

    /**
     * Sets filtered_hotels
     *
     * @param float[] $filtered_hotels filtered_hotels
     *
     * @return $this
     */
    public function setFilteredHotels($filtered_hotels)
    {
        $this->container['filtered_hotels'] = $filtered_hotels;

        return $this;
    }

    /**
     * Gets enriched
     *
     * @return bool
     */
    public function getEnriched()
    {
        return $this->container['enriched'];
    }

    /**
     * Sets enriched
     *
     * @param bool $enriched enriched
     *
     * @return $this
     */
    public function setEnriched($enriched)
    {
        $this->container['enriched'] = $enriched;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return string
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param string $sort_by sort_by
     *
     * @return $this
     */
    public function setSortBy($sort_by)
    {
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \Swagger\Client\Model\InlineResponse2002Statistics
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \Swagger\Client\Model\InlineResponse2002Statistics $statistics statistics
     *
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets go_ext_version
     *
     * @return string
     */
    public function getGoExtVersion()
    {
        return $this->container['go_ext_version'];
    }

    /**
     * Sets go_ext_version
     *
     * @param string $go_ext_version go_ext_version
     *
     * @return $this
     */
    public function setGoExtVersion($go_ext_version)
    {
        $this->container['go_ext_version'] = $go_ext_version;

        return $this;
    }

    /**
     * Gets hotels_count
     *
     * @return float
     */
    public function getHotelsCount()
    {
        return $this->container['hotels_count'];
    }

    /**
     * Sets hotels_count
     *
     * @param float $hotels_count hotels_count
     *
     * @return $this
     */
    public function setHotelsCount($hotels_count)
    {
        $this->container['hotels_count'] = $hotels_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
