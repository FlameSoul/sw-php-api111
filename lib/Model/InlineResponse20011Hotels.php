<?php
/**
 * InlineResponse20011Hotels
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20011Hotels Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20011Hotels implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_11_hotels';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'name' => 'string',
        'stars' => 'float',
        'site_url' => 'string',
        'public_url' => 'string',
        'features' => '\Swagger\Client\Model\InlineResponse20011Features',
        'short_info' => 'string',
        'hotel_info' => 'string',
        'kids_facilities' => 'string[]',
        'territory' => 'string[]',
        'attractions' => 'string[]',
        'room_facilities' => 'string[]',
        'lat' => 'float',
        'long' => 'float',
        'city' => '\Swagger\Client\Model\InlineResponse20011City',
        'country' => '\Swagger\Client\Model\InlineResponse20011Country',
        'rating' => 'float',
        'images' => '\Swagger\Client\Model\InlineResponse20011Images[]',
        'rest_types' => '\Swagger\Client\Model\InlineResponse20011RestTypes',
        'facts' => '\Swagger\Client\Model\InlineResponse20011Facts[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'stars' => null,
        'site_url' => null,
        'public_url' => null,
        'features' => null,
        'short_info' => null,
        'hotel_info' => null,
        'kids_facilities' => null,
        'territory' => null,
        'attractions' => null,
        'room_facilities' => null,
        'lat' => null,
        'long' => null,
        'city' => null,
        'country' => null,
        'rating' => null,
        'images' => null,
        'rest_types' => null,
        'facts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'stars' => 'stars',
        'site_url' => 'site_url',
        'public_url' => 'public_url',
        'features' => 'features',
        'short_info' => 'short_info',
        'hotel_info' => 'hotel_info',
        'kids_facilities' => 'kids_facilities',
        'territory' => 'territory',
        'attractions' => 'attractions',
        'room_facilities' => 'room_facilities',
        'lat' => 'lat',
        'long' => 'long',
        'city' => 'city',
        'country' => 'country',
        'rating' => 'rating',
        'images' => 'images',
        'rest_types' => 'rest_types',
        'facts' => 'facts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'stars' => 'setStars',
        'site_url' => 'setSiteUrl',
        'public_url' => 'setPublicUrl',
        'features' => 'setFeatures',
        'short_info' => 'setShortInfo',
        'hotel_info' => 'setHotelInfo',
        'kids_facilities' => 'setKidsFacilities',
        'territory' => 'setTerritory',
        'attractions' => 'setAttractions',
        'room_facilities' => 'setRoomFacilities',
        'lat' => 'setLat',
        'long' => 'setLong',
        'city' => 'setCity',
        'country' => 'setCountry',
        'rating' => 'setRating',
        'images' => 'setImages',
        'rest_types' => 'setRestTypes',
        'facts' => 'setFacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'stars' => 'getStars',
        'site_url' => 'getSiteUrl',
        'public_url' => 'getPublicUrl',
        'features' => 'getFeatures',
        'short_info' => 'getShortInfo',
        'hotel_info' => 'getHotelInfo',
        'kids_facilities' => 'getKidsFacilities',
        'territory' => 'getTerritory',
        'attractions' => 'getAttractions',
        'room_facilities' => 'getRoomFacilities',
        'lat' => 'getLat',
        'long' => 'getLong',
        'city' => 'getCity',
        'country' => 'getCountry',
        'rating' => 'getRating',
        'images' => 'getImages',
        'rest_types' => 'getRestTypes',
        'facts' => 'getFacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['stars'] = isset($data['stars']) ? $data['stars'] : null;
        $this->container['site_url'] = isset($data['site_url']) ? $data['site_url'] : null;
        $this->container['public_url'] = isset($data['public_url']) ? $data['public_url'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['short_info'] = isset($data['short_info']) ? $data['short_info'] : null;
        $this->container['hotel_info'] = isset($data['hotel_info']) ? $data['hotel_info'] : null;
        $this->container['kids_facilities'] = isset($data['kids_facilities']) ? $data['kids_facilities'] : null;
        $this->container['territory'] = isset($data['territory']) ? $data['territory'] : null;
        $this->container['attractions'] = isset($data['attractions']) ? $data['attractions'] : null;
        $this->container['room_facilities'] = isset($data['room_facilities']) ? $data['room_facilities'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['long'] = isset($data['long']) ? $data['long'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['rest_types'] = isset($data['rest_types']) ? $data['rest_types'] : null;
        $this->container['facts'] = isset($data['facts']) ? $data['facts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets stars
     *
     * @return float
     */
    public function getStars()
    {
        return $this->container['stars'];
    }

    /**
     * Sets stars
     *
     * @param float $stars stars
     *
     * @return $this
     */
    public function setStars($stars)
    {
        $this->container['stars'] = $stars;

        return $this;
    }

    /**
     * Gets site_url
     *
     * @return string
     */
    public function getSiteUrl()
    {
        return $this->container['site_url'];
    }

    /**
     * Sets site_url
     *
     * @param string $site_url site_url
     *
     * @return $this
     */
    public function setSiteUrl($site_url)
    {
        $this->container['site_url'] = $site_url;

        return $this;
    }

    /**
     * Gets public_url
     *
     * @return string
     */
    public function getPublicUrl()
    {
        return $this->container['public_url'];
    }

    /**
     * Sets public_url
     *
     * @param string $public_url public_url
     *
     * @return $this
     */
    public function setPublicUrl($public_url)
    {
        $this->container['public_url'] = $public_url;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \Swagger\Client\Model\InlineResponse20011Features
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \Swagger\Client\Model\InlineResponse20011Features $features features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets short_info
     *
     * @return string
     */
    public function getShortInfo()
    {
        return $this->container['short_info'];
    }

    /**
     * Sets short_info
     *
     * @param string $short_info short_info
     *
     * @return $this
     */
    public function setShortInfo($short_info)
    {
        $this->container['short_info'] = $short_info;

        return $this;
    }

    /**
     * Gets hotel_info
     *
     * @return string
     */
    public function getHotelInfo()
    {
        return $this->container['hotel_info'];
    }

    /**
     * Sets hotel_info
     *
     * @param string $hotel_info hotel_info
     *
     * @return $this
     */
    public function setHotelInfo($hotel_info)
    {
        $this->container['hotel_info'] = $hotel_info;

        return $this;
    }

    /**
     * Gets kids_facilities
     *
     * @return string[]
     */
    public function getKidsFacilities()
    {
        return $this->container['kids_facilities'];
    }

    /**
     * Sets kids_facilities
     *
     * @param string[] $kids_facilities kids_facilities
     *
     * @return $this
     */
    public function setKidsFacilities($kids_facilities)
    {
        $this->container['kids_facilities'] = $kids_facilities;

        return $this;
    }

    /**
     * Gets territory
     *
     * @return string[]
     */
    public function getTerritory()
    {
        return $this->container['territory'];
    }

    /**
     * Sets territory
     *
     * @param string[] $territory territory
     *
     * @return $this
     */
    public function setTerritory($territory)
    {
        $this->container['territory'] = $territory;

        return $this;
    }

    /**
     * Gets attractions
     *
     * @return string[]
     */
    public function getAttractions()
    {
        return $this->container['attractions'];
    }

    /**
     * Sets attractions
     *
     * @param string[] $attractions attractions
     *
     * @return $this
     */
    public function setAttractions($attractions)
    {
        $this->container['attractions'] = $attractions;

        return $this;
    }

    /**
     * Gets room_facilities
     *
     * @return string[]
     */
    public function getRoomFacilities()
    {
        return $this->container['room_facilities'];
    }

    /**
     * Sets room_facilities
     *
     * @param string[] $room_facilities room_facilities
     *
     * @return $this
     */
    public function setRoomFacilities($room_facilities)
    {
        $this->container['room_facilities'] = $room_facilities;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return float
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param float $lat lat
     *
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets long
     *
     * @return float
     */
    public function getLong()
    {
        return $this->container['long'];
    }

    /**
     * Sets long
     *
     * @param float $long long
     *
     * @return $this
     */
    public function setLong($long)
    {
        $this->container['long'] = $long;

        return $this;
    }

    /**
     * Gets city
     *
     * @return \Swagger\Client\Model\InlineResponse20011City
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param \Swagger\Client\Model\InlineResponse20011City $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Swagger\Client\Model\InlineResponse20011Country
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Swagger\Client\Model\InlineResponse20011Country $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return float
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param float $rating rating
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Swagger\Client\Model\InlineResponse20011Images[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Swagger\Client\Model\InlineResponse20011Images[] $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets rest_types
     *
     * @return \Swagger\Client\Model\InlineResponse20011RestTypes
     */
    public function getRestTypes()
    {
        return $this->container['rest_types'];
    }

    /**
     * Sets rest_types
     *
     * @param \Swagger\Client\Model\InlineResponse20011RestTypes $rest_types rest_types
     *
     * @return $this
     */
    public function setRestTypes($rest_types)
    {
        $this->container['rest_types'] = $rest_types;

        return $this;
    }

    /**
     * Gets facts
     *
     * @return \Swagger\Client\Model\InlineResponse20011Facts[]
     */
    public function getFacts()
    {
        return $this->container['facts'];
    }

    /**
     * Sets facts
     *
     * @param \Swagger\Client\Model\InlineResponse20011Facts[] $facts facts
     *
     * @return $this
     */
    public function setFacts($facts)
    {
        $this->container['facts'] = $facts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
