<?php
/**
 * InlineResponse2004OffersExtras
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2004OffersExtras Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2004OffersExtras implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_4_offers_extras';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cheap' => 'bool',
        'instant_confirm' => 'bool',
        'early_booking' => 'bool',
        'best_price' => 'bool',
        'surcharge' => 'float',
        'cancellation_policy' => 'string',
        'included' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cheap' => null,
        'instant_confirm' => null,
        'early_booking' => null,
        'best_price' => null,
        'surcharge' => null,
        'cancellation_policy' => 'nullable',
        'included' => 'nullable'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cheap' => 'cheap',
        'instant_confirm' => 'instant_confirm',
        'early_booking' => 'early_booking',
        'best_price' => 'best_price',
        'surcharge' => 'surcharge',
        'cancellation_policy' => 'cancellation_policy',
        'included' => 'included'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cheap' => 'setCheap',
        'instant_confirm' => 'setInstantConfirm',
        'early_booking' => 'setEarlyBooking',
        'best_price' => 'setBestPrice',
        'surcharge' => 'setSurcharge',
        'cancellation_policy' => 'setCancellationPolicy',
        'included' => 'setIncluded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cheap' => 'getCheap',
        'instant_confirm' => 'getInstantConfirm',
        'early_booking' => 'getEarlyBooking',
        'best_price' => 'getBestPrice',
        'surcharge' => 'getSurcharge',
        'cancellation_policy' => 'getCancellationPolicy',
        'included' => 'getIncluded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cheap'] = isset($data['cheap']) ? $data['cheap'] : null;
        $this->container['instant_confirm'] = isset($data['instant_confirm']) ? $data['instant_confirm'] : null;
        $this->container['early_booking'] = isset($data['early_booking']) ? $data['early_booking'] : null;
        $this->container['best_price'] = isset($data['best_price']) ? $data['best_price'] : null;
        $this->container['surcharge'] = isset($data['surcharge']) ? $data['surcharge'] : null;
        $this->container['cancellation_policy'] = isset($data['cancellation_policy']) ? $data['cancellation_policy'] : null;
        $this->container['included'] = isset($data['included']) ? $data['included'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cheap
     *
     * @return bool
     */
    public function getCheap()
    {
        return $this->container['cheap'];
    }

    /**
     * Sets cheap
     *
     * @param bool $cheap cheap
     *
     * @return $this
     */
    public function setCheap($cheap)
    {
        $this->container['cheap'] = $cheap;

        return $this;
    }

    /**
     * Gets instant_confirm
     *
     * @return bool
     */
    public function getInstantConfirm()
    {
        return $this->container['instant_confirm'];
    }

    /**
     * Sets instant_confirm
     *
     * @param bool $instant_confirm instant_confirm
     *
     * @return $this
     */
    public function setInstantConfirm($instant_confirm)
    {
        $this->container['instant_confirm'] = $instant_confirm;

        return $this;
    }

    /**
     * Gets early_booking
     *
     * @return bool
     */
    public function getEarlyBooking()
    {
        return $this->container['early_booking'];
    }

    /**
     * Sets early_booking
     *
     * @param bool $early_booking early_booking
     *
     * @return $this
     */
    public function setEarlyBooking($early_booking)
    {
        $this->container['early_booking'] = $early_booking;

        return $this;
    }

    /**
     * Gets best_price
     *
     * @return bool
     */
    public function getBestPrice()
    {
        return $this->container['best_price'];
    }

    /**
     * Sets best_price
     *
     * @param bool $best_price best_price
     *
     * @return $this
     */
    public function setBestPrice($best_price)
    {
        $this->container['best_price'] = $best_price;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return float
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param float $surcharge Доплата
     *
     * @return $this
     */
    public function setSurcharge($surcharge)
    {
        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets cancellation_policy
     *
     * @return string
     */
    public function getCancellationPolicy()
    {
        return $this->container['cancellation_policy'];
    }

    /**
     * Sets cancellation_policy
     *
     * @param string $cancellation_policy cancellation_policy
     *
     * @return $this
     */
    public function setCancellationPolicy($cancellation_policy)
    {
        $this->container['cancellation_policy'] = $cancellation_policy;

        return $this;
    }

    /**
     * Gets included
     *
     * @return string
     */
    public function getIncluded()
    {
        return $this->container['included'];
    }

    /**
     * Sets included
     *
     * @param string $included included
     *
     * @return $this
     */
    public function setIncluded($included)
    {
        $this->container['included'] = $included;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
