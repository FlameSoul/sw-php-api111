<?php
/**
 * InlineResponse2002FilteredResults
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAPI
 *
 * <center>                         <img src=\"https://img.cdn.level.travel/assets/logo/vector-58a947fae5d47fa53329be95ff9cff853e8889f70ac61fc2d2b6572a5998330e.svg\">                         <br><br>                         <h1>Партнёрская документация Open API</h1>                       </center>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2002FilteredResults Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002FilteredResults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_filtered_results';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hotel' => '\Swagger\Client\Model\InlineResponse2002Hotel1',
        'min_price' => 'float',
        'max_price' => 'float',
        'surcharge' => 'string',
        'min_price_nights' => 'float',
        'pansion_prices' => '\Swagger\Client\Model\InlineResponse2002PansionPrices1',
        'extras' => '\Swagger\Client\Model\InlineResponse2002Extras',
        'operators' => 'string',
        'dates' => '\Swagger\Client\Model\InlineResponse2002Dates1',
        'op_pansion_prices' => '\Swagger\Client\Model\InlineResponse2002OpPansionPrices1',
        'cancellation_policy' => 'string',
        'surcharges_by_level' => '\Swagger\Client\Model\InlineResponse2002SurchargesByLevel1',
        'tour_id' => 'string',
        'labels' => '\Swagger\Client\Model\InlineResponse2002Labels1[]',
        'availability' => '\Swagger\Client\Model\InlineResponse2002Availability1',
        'price_per_night' => 'float',
        'departure_id' => 'float',
        'confirmability_index' => 'float',
        'bonus_count' => 'float',
        'penalty' => 'float',
        'penalized_filters' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hotel' => null,
        'min_price' => null,
        'max_price' => null,
        'surcharge' => 'nullable',
        'min_price_nights' => null,
        'pansion_prices' => null,
        'extras' => null,
        'operators' => 'nullable',
        'dates' => null,
        'op_pansion_prices' => null,
        'cancellation_policy' => 'nullable',
        'surcharges_by_level' => null,
        'tour_id' => null,
        'labels' => null,
        'availability' => null,
        'price_per_night' => null,
        'departure_id' => null,
        'confirmability_index' => null,
        'bonus_count' => null,
        'penalty' => null,
        'penalized_filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hotel' => 'hotel',
        'min_price' => 'min_price',
        'max_price' => 'max_price',
        'surcharge' => 'surcharge',
        'min_price_nights' => 'min_price_nights',
        'pansion_prices' => 'pansion_prices',
        'extras' => 'extras',
        'operators' => 'operators',
        'dates' => 'dates',
        'op_pansion_prices' => 'op_pansion_prices',
        'cancellation_policy' => 'cancellation_policy',
        'surcharges_by_level' => 'surcharges_by_level',
        'tour_id' => 'tour_id',
        'labels' => 'labels',
        'availability' => 'availability',
        'price_per_night' => 'price_per_night',
        'departure_id' => 'departure_id',
        'confirmability_index' => 'confirmability_index',
        'bonus_count' => 'bonus_count',
        'penalty' => 'penalty',
        'penalized_filters' => 'penalized_filters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hotel' => 'setHotel',
        'min_price' => 'setMinPrice',
        'max_price' => 'setMaxPrice',
        'surcharge' => 'setSurcharge',
        'min_price_nights' => 'setMinPriceNights',
        'pansion_prices' => 'setPansionPrices',
        'extras' => 'setExtras',
        'operators' => 'setOperators',
        'dates' => 'setDates',
        'op_pansion_prices' => 'setOpPansionPrices',
        'cancellation_policy' => 'setCancellationPolicy',
        'surcharges_by_level' => 'setSurchargesByLevel',
        'tour_id' => 'setTourId',
        'labels' => 'setLabels',
        'availability' => 'setAvailability',
        'price_per_night' => 'setPricePerNight',
        'departure_id' => 'setDepartureId',
        'confirmability_index' => 'setConfirmabilityIndex',
        'bonus_count' => 'setBonusCount',
        'penalty' => 'setPenalty',
        'penalized_filters' => 'setPenalizedFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hotel' => 'getHotel',
        'min_price' => 'getMinPrice',
        'max_price' => 'getMaxPrice',
        'surcharge' => 'getSurcharge',
        'min_price_nights' => 'getMinPriceNights',
        'pansion_prices' => 'getPansionPrices',
        'extras' => 'getExtras',
        'operators' => 'getOperators',
        'dates' => 'getDates',
        'op_pansion_prices' => 'getOpPansionPrices',
        'cancellation_policy' => 'getCancellationPolicy',
        'surcharges_by_level' => 'getSurchargesByLevel',
        'tour_id' => 'getTourId',
        'labels' => 'getLabels',
        'availability' => 'getAvailability',
        'price_per_night' => 'getPricePerNight',
        'departure_id' => 'getDepartureId',
        'confirmability_index' => 'getConfirmabilityIndex',
        'bonus_count' => 'getBonusCount',
        'penalty' => 'getPenalty',
        'penalized_filters' => 'getPenalizedFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hotel'] = isset($data['hotel']) ? $data['hotel'] : null;
        $this->container['min_price'] = isset($data['min_price']) ? $data['min_price'] : null;
        $this->container['max_price'] = isset($data['max_price']) ? $data['max_price'] : null;
        $this->container['surcharge'] = isset($data['surcharge']) ? $data['surcharge'] : null;
        $this->container['min_price_nights'] = isset($data['min_price_nights']) ? $data['min_price_nights'] : null;
        $this->container['pansion_prices'] = isset($data['pansion_prices']) ? $data['pansion_prices'] : null;
        $this->container['extras'] = isset($data['extras']) ? $data['extras'] : null;
        $this->container['operators'] = isset($data['operators']) ? $data['operators'] : null;
        $this->container['dates'] = isset($data['dates']) ? $data['dates'] : null;
        $this->container['op_pansion_prices'] = isset($data['op_pansion_prices']) ? $data['op_pansion_prices'] : null;
        $this->container['cancellation_policy'] = isset($data['cancellation_policy']) ? $data['cancellation_policy'] : null;
        $this->container['surcharges_by_level'] = isset($data['surcharges_by_level']) ? $data['surcharges_by_level'] : null;
        $this->container['tour_id'] = isset($data['tour_id']) ? $data['tour_id'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['price_per_night'] = isset($data['price_per_night']) ? $data['price_per_night'] : null;
        $this->container['departure_id'] = isset($data['departure_id']) ? $data['departure_id'] : null;
        $this->container['confirmability_index'] = isset($data['confirmability_index']) ? $data['confirmability_index'] : null;
        $this->container['bonus_count'] = isset($data['bonus_count']) ? $data['bonus_count'] : null;
        $this->container['penalty'] = isset($data['penalty']) ? $data['penalty'] : null;
        $this->container['penalized_filters'] = isset($data['penalized_filters']) ? $data['penalized_filters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hotel
     *
     * @return \Swagger\Client\Model\InlineResponse2002Hotel1
     */
    public function getHotel()
    {
        return $this->container['hotel'];
    }

    /**
     * Sets hotel
     *
     * @param \Swagger\Client\Model\InlineResponse2002Hotel1 $hotel hotel
     *
     * @return $this
     */
    public function setHotel($hotel)
    {
        $this->container['hotel'] = $hotel;

        return $this;
    }

    /**
     * Gets min_price
     *
     * @return float
     */
    public function getMinPrice()
    {
        return $this->container['min_price'];
    }

    /**
     * Sets min_price
     *
     * @param float $min_price min_price
     *
     * @return $this
     */
    public function setMinPrice($min_price)
    {
        $this->container['min_price'] = $min_price;

        return $this;
    }

    /**
     * Gets max_price
     *
     * @return float
     */
    public function getMaxPrice()
    {
        return $this->container['max_price'];
    }

    /**
     * Sets max_price
     *
     * @param float $max_price max_price
     *
     * @return $this
     */
    public function setMaxPrice($max_price)
    {
        $this->container['max_price'] = $max_price;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return string
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param string $surcharge surcharge
     *
     * @return $this
     */
    public function setSurcharge($surcharge)
    {
        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets min_price_nights
     *
     * @return float
     */
    public function getMinPriceNights()
    {
        return $this->container['min_price_nights'];
    }

    /**
     * Sets min_price_nights
     *
     * @param float $min_price_nights min_price_nights
     *
     * @return $this
     */
    public function setMinPriceNights($min_price_nights)
    {
        $this->container['min_price_nights'] = $min_price_nights;

        return $this;
    }

    /**
     * Gets pansion_prices
     *
     * @return \Swagger\Client\Model\InlineResponse2002PansionPrices1
     */
    public function getPansionPrices()
    {
        return $this->container['pansion_prices'];
    }

    /**
     * Sets pansion_prices
     *
     * @param \Swagger\Client\Model\InlineResponse2002PansionPrices1 $pansion_prices pansion_prices
     *
     * @return $this
     */
    public function setPansionPrices($pansion_prices)
    {
        $this->container['pansion_prices'] = $pansion_prices;

        return $this;
    }

    /**
     * Gets extras
     *
     * @return \Swagger\Client\Model\InlineResponse2002Extras
     */
    public function getExtras()
    {
        return $this->container['extras'];
    }

    /**
     * Sets extras
     *
     * @param \Swagger\Client\Model\InlineResponse2002Extras $extras extras
     *
     * @return $this
     */
    public function setExtras($extras)
    {
        $this->container['extras'] = $extras;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return string
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param string $operators operators
     *
     * @return $this
     */
    public function setOperators($operators)
    {
        $this->container['operators'] = $operators;

        return $this;
    }

    /**
     * Gets dates
     *
     * @return \Swagger\Client\Model\InlineResponse2002Dates1
     */
    public function getDates()
    {
        return $this->container['dates'];
    }

    /**
     * Sets dates
     *
     * @param \Swagger\Client\Model\InlineResponse2002Dates1 $dates dates
     *
     * @return $this
     */
    public function setDates($dates)
    {
        $this->container['dates'] = $dates;

        return $this;
    }

    /**
     * Gets op_pansion_prices
     *
     * @return \Swagger\Client\Model\InlineResponse2002OpPansionPrices1
     */
    public function getOpPansionPrices()
    {
        return $this->container['op_pansion_prices'];
    }

    /**
     * Sets op_pansion_prices
     *
     * @param \Swagger\Client\Model\InlineResponse2002OpPansionPrices1 $op_pansion_prices op_pansion_prices
     *
     * @return $this
     */
    public function setOpPansionPrices($op_pansion_prices)
    {
        $this->container['op_pansion_prices'] = $op_pansion_prices;

        return $this;
    }

    /**
     * Gets cancellation_policy
     *
     * @return string
     */
    public function getCancellationPolicy()
    {
        return $this->container['cancellation_policy'];
    }

    /**
     * Sets cancellation_policy
     *
     * @param string $cancellation_policy cancellation_policy
     *
     * @return $this
     */
    public function setCancellationPolicy($cancellation_policy)
    {
        $this->container['cancellation_policy'] = $cancellation_policy;

        return $this;
    }

    /**
     * Gets surcharges_by_level
     *
     * @return \Swagger\Client\Model\InlineResponse2002SurchargesByLevel1
     */
    public function getSurchargesByLevel()
    {
        return $this->container['surcharges_by_level'];
    }

    /**
     * Sets surcharges_by_level
     *
     * @param \Swagger\Client\Model\InlineResponse2002SurchargesByLevel1 $surcharges_by_level surcharges_by_level
     *
     * @return $this
     */
    public function setSurchargesByLevel($surcharges_by_level)
    {
        $this->container['surcharges_by_level'] = $surcharges_by_level;

        return $this;
    }

    /**
     * Gets tour_id
     *
     * @return string
     */
    public function getTourId()
    {
        return $this->container['tour_id'];
    }

    /**
     * Sets tour_id
     *
     * @param string $tour_id tour_id
     *
     * @return $this
     */
    public function setTourId($tour_id)
    {
        $this->container['tour_id'] = $tour_id;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Swagger\Client\Model\InlineResponse2002Labels1[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Swagger\Client\Model\InlineResponse2002Labels1[] $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \Swagger\Client\Model\InlineResponse2002Availability1
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \Swagger\Client\Model\InlineResponse2002Availability1 $availability availability
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets price_per_night
     *
     * @return float
     */
    public function getPricePerNight()
    {
        return $this->container['price_per_night'];
    }

    /**
     * Sets price_per_night
     *
     * @param float $price_per_night price_per_night
     *
     * @return $this
     */
    public function setPricePerNight($price_per_night)
    {
        $this->container['price_per_night'] = $price_per_night;

        return $this;
    }

    /**
     * Gets departure_id
     *
     * @return float
     */
    public function getDepartureId()
    {
        return $this->container['departure_id'];
    }

    /**
     * Sets departure_id
     *
     * @param float $departure_id departure_id
     *
     * @return $this
     */
    public function setDepartureId($departure_id)
    {
        $this->container['departure_id'] = $departure_id;

        return $this;
    }

    /**
     * Gets confirmability_index
     *
     * @return float
     */
    public function getConfirmabilityIndex()
    {
        return $this->container['confirmability_index'];
    }

    /**
     * Sets confirmability_index
     *
     * @param float $confirmability_index confirmability_index
     *
     * @return $this
     */
    public function setConfirmabilityIndex($confirmability_index)
    {
        $this->container['confirmability_index'] = $confirmability_index;

        return $this;
    }

    /**
     * Gets bonus_count
     *
     * @return float
     */
    public function getBonusCount()
    {
        return $this->container['bonus_count'];
    }

    /**
     * Sets bonus_count
     *
     * @param float $bonus_count bonus_count
     *
     * @return $this
     */
    public function setBonusCount($bonus_count)
    {
        $this->container['bonus_count'] = $bonus_count;

        return $this;
    }

    /**
     * Gets penalty
     *
     * @return float
     */
    public function getPenalty()
    {
        return $this->container['penalty'];
    }

    /**
     * Sets penalty
     *
     * @param float $penalty penalty
     *
     * @return $this
     */
    public function setPenalty($penalty)
    {
        $this->container['penalty'] = $penalty;

        return $this;
    }

    /**
     * Gets penalized_filters
     *
     * @return string[]
     */
    public function getPenalizedFilters()
    {
        return $this->container['penalized_filters'];
    }

    /**
     * Sets penalized_filters
     *
     * @param string[] $penalized_filters penalized_filters
     *
     * @return $this
     */
    public function setPenalizedFilters($penalized_filters)
    {
        $this->container['penalized_filters'] = $penalized_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
